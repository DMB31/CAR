"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/use-intl";
exports.ids = ["vendor-chunks/use-intl"];
exports.modules = {

/***/ "(ssr)/./node_modules/use-intl/dist/esm/development/core.js":
/*!************************************************************!*\
  !*** ./node_modules/use-intl/dist/esm/development/core.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlError: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   IntlErrorCode: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   _createCache: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   _createIntlFormatters: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createFormatter: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createTranslator: () => (/* binding */ createTranslator),\n/* harmony export */   hasLocale: () => (/* binding */ hasLocale),\n/* harmony export */   initializeConfig: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.i)\n/* harmony export */ });\n/* harmony import */ var _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initializeConfig-DPFnvsUO.js */ \"(ssr)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js\");\n\n\nfunction createTranslatorImpl({ messages, namespace, ...rest }, namespacePrefix) {\n    // The `namespacePrefix` is part of the type system.\n    // See the comment in the function invocation.\n    messages = messages[namespacePrefix];\n    namespace = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.r)(namespace, namespacePrefix);\n    return (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.e)({\n        ...rest,\n        messages,\n        namespace\n    });\n}\n// This type is slightly more loose than `AbstractIntlMessages`\n// in order to avoid a type error.\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */ function createTranslator({ _cache = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.d)(), _formatters = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.b)(_cache), getMessageFallback = _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.f, messages, namespace, onError = _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.g, ...rest }) {\n    // We have to wrap the actual function so the type inference for the optional\n    // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n    // The prefix (\"!\") is arbitrary.\n    // @ts-expect-error Use the explicit annotation instead\n    return createTranslatorImpl({\n        ...rest,\n        onError,\n        cache: _cache,\n        formatters: _formatters,\n        getMessageFallback,\n        // @ts-expect-error `messages` is allowed to be `undefined` here and will be handled internally\n        messages: {\n            \"!\": messages\n        },\n        namespace: namespace ? `!.${namespace}` : \"!\"\n    }, \"!\");\n}\n/**\n * Checks if a locale exists in a list of locales.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale\n */ function hasLocale(locales, candidate) {\n    return locales.includes(candidate);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9lc20vZGV2ZWxvcG1lbnQvY29yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb007QUFDbkU7QUFLakksU0FBU29CLHFCQUFxQixFQUM1QkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1QsR0FBR0MsTUFDSixFQUFFQyxlQUFlO0lBQ2hCLG9EQUFvRDtJQUNwRCw4Q0FBOEM7SUFDOUNILFdBQVdBLFFBQVEsQ0FBQ0csZ0JBQWdCO0lBQ3BDRixZQUFZckIsZ0VBQWdCQSxDQUFDcUIsV0FBV0U7SUFDeEMsT0FBT3JCLGdFQUFvQkEsQ0FBQztRQUMxQixHQUFHb0IsSUFBSTtRQUNQRjtRQUNBQztJQUNGO0FBQ0Y7QUFFQSwrREFBK0Q7QUFDL0Qsa0NBQWtDO0FBRWxDOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRyxpQkFBaUIsRUFDeEJDLFNBQVNqQixnRUFBV0EsRUFBRSxFQUN0QmtCLGNBQWNwQixnRUFBb0JBLENBQUNtQixPQUFPLEVBQzFDRSxxQkFBcUJ2Qiw0REFBeUIsRUFDOUNnQixRQUFRLEVBQ1JDLFNBQVMsRUFDVE8sVUFBVWxCLDREQUFjLEVBQ3hCLEdBQUdZLE1BQ0o7SUFDQyw2RUFBNkU7SUFDN0UsNkVBQTZFO0lBQzdFLGlDQUFpQztJQUNqQyx1REFBdUQ7SUFDdkQsT0FBT0gscUJBQXFCO1FBQzFCLEdBQUdHLElBQUk7UUFDUE07UUFDQUMsT0FBT0o7UUFDUEssWUFBWUo7UUFDWkM7UUFDQSwrRkFBK0Y7UUFDL0ZQLFVBQVU7WUFDUixLQUFLQTtRQUNQO1FBQ0FDLFdBQVdBLFlBQVksQ0FBQyxFQUFFLEVBQUVBLFVBQVUsQ0FBQyxHQUFHO0lBQzVDLEdBQUc7QUFDTDtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTVSxVQUFVQyxPQUFPLEVBQUVDLFNBQVM7SUFDbkMsT0FBT0QsUUFBUUUsUUFBUSxDQUFDRDtBQUMxQjtBQUVtSCIsInNvdXJjZXMiOlsid2VicGFjazovL2Nhci1pbXBvcnQtbGFuZGluZy8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L2VzbS9kZXZlbG9wbWVudC9jb3JlLmpzPzU5MTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgciBhcyByZXNvbHZlTmFtZXNwYWNlLCBlIGFzIGNyZWF0ZUJhc2VUcmFuc2xhdG9yLCBmIGFzIGRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2ssIGIgYXMgY3JlYXRlSW50bEZvcm1hdHRlcnMsIGQgYXMgY3JlYXRlQ2FjaGUsIGcgYXMgZGVmYXVsdE9uRXJyb3IgfSBmcm9tICcuL2luaXRpYWxpemVDb25maWctRFBGbnZzVU8uanMnO1xuZXhwb3J0IHsgSSBhcyBJbnRsRXJyb3IsIGEgYXMgSW50bEVycm9yQ29kZSwgYyBhcyBjcmVhdGVGb3JtYXR0ZXIsIGkgYXMgaW5pdGlhbGl6ZUNvbmZpZyB9IGZyb20gJy4vaW5pdGlhbGl6ZUNvbmZpZy1EUEZudnNVTy5qcyc7XG5cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zbGF0b3JJbXBsKHtcbiAgbWVzc2FnZXMsXG4gIG5hbWVzcGFjZSxcbiAgLi4ucmVzdFxufSwgbmFtZXNwYWNlUHJlZml4KSB7XG4gIC8vIFRoZSBgbmFtZXNwYWNlUHJlZml4YCBpcyBwYXJ0IG9mIHRoZSB0eXBlIHN5c3RlbS5cbiAgLy8gU2VlIHRoZSBjb21tZW50IGluIHRoZSBmdW5jdGlvbiBpbnZvY2F0aW9uLlxuICBtZXNzYWdlcyA9IG1lc3NhZ2VzW25hbWVzcGFjZVByZWZpeF07XG4gIG5hbWVzcGFjZSA9IHJlc29sdmVOYW1lc3BhY2UobmFtZXNwYWNlLCBuYW1lc3BhY2VQcmVmaXgpO1xuICByZXR1cm4gY3JlYXRlQmFzZVRyYW5zbGF0b3Ioe1xuICAgIC4uLnJlc3QsXG4gICAgbWVzc2FnZXMsXG4gICAgbmFtZXNwYWNlXG4gIH0pO1xufVxuXG4vLyBUaGlzIHR5cGUgaXMgc2xpZ2h0bHkgbW9yZSBsb29zZSB0aGFuIGBBYnN0cmFjdEludGxNZXNzYWdlc2Bcbi8vIGluIG9yZGVyIHRvIGF2b2lkIGEgdHlwZSBlcnJvci5cblxuLyoqXG4gKiBUcmFuc2xhdGVzIG1lc3NhZ2VzIGZyb20gdGhlIGdpdmVuIG5hbWVzcGFjZSBieSB1c2luZyB0aGUgSUNVIHN5bnRheC5cbiAqIFNlZSBodHRwczovL2Zvcm1hdGpzLmlvL2RvY3MvY29yZS1jb25jZXB0cy9pY3Utc3ludGF4LlxuICpcbiAqIElmIG5vIG5hbWVzcGFjZSBpcyBwcm92aWRlZCwgYWxsIGF2YWlsYWJsZSBtZXNzYWdlcyBhcmUgcmV0dXJuZWQuXG4gKiBUaGUgbmFtZXNwYWNlIGNhbiBhbHNvIGluZGljYXRlIG5lc3RpbmcgYnkgdXNpbmcgYSBkb3RcbiAqIChlLmcuIGBuYW1lc3BhY2UuQ29tcG9uZW50YCkuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zbGF0b3Ioe1xuICBfY2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuICBfZm9ybWF0dGVycyA9IGNyZWF0ZUludGxGb3JtYXR0ZXJzKF9jYWNoZSksXG4gIGdldE1lc3NhZ2VGYWxsYmFjayA9IGRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2ssXG4gIG1lc3NhZ2VzLFxuICBuYW1lc3BhY2UsXG4gIG9uRXJyb3IgPSBkZWZhdWx0T25FcnJvcixcbiAgLi4ucmVzdFxufSkge1xuICAvLyBXZSBoYXZlIHRvIHdyYXAgdGhlIGFjdHVhbCBmdW5jdGlvbiBzbyB0aGUgdHlwZSBpbmZlcmVuY2UgZm9yIHRoZSBvcHRpb25hbFxuICAvLyBuYW1lc3BhY2Ugd29ya3MgY29ycmVjdGx5LiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzcxNTI5NTc1LzM0MzA0NVxuICAvLyBUaGUgcHJlZml4IChcIiFcIikgaXMgYXJiaXRyYXJ5LlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIFVzZSB0aGUgZXhwbGljaXQgYW5ub3RhdGlvbiBpbnN0ZWFkXG4gIHJldHVybiBjcmVhdGVUcmFuc2xhdG9ySW1wbCh7XG4gICAgLi4ucmVzdCxcbiAgICBvbkVycm9yLFxuICAgIGNhY2hlOiBfY2FjaGUsXG4gICAgZm9ybWF0dGVyczogX2Zvcm1hdHRlcnMsXG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrLFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYG1lc3NhZ2VzYCBpcyBhbGxvd2VkIHRvIGJlIGB1bmRlZmluZWRgIGhlcmUgYW5kIHdpbGwgYmUgaGFuZGxlZCBpbnRlcm5hbGx5XG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICchJzogbWVzc2FnZXNcbiAgICB9LFxuICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlID8gYCEuJHtuYW1lc3BhY2V9YCA6ICchJ1xuICB9LCAnIScpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxvY2FsZSBleGlzdHMgaW4gYSBsaXN0IG9mIGxvY2FsZXMuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0xvY2FsZVxuICovXG5mdW5jdGlvbiBoYXNMb2NhbGUobG9jYWxlcywgY2FuZGlkYXRlKSB7XG4gIHJldHVybiBsb2NhbGVzLmluY2x1ZGVzKGNhbmRpZGF0ZSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNhY2hlIGFzIF9jcmVhdGVDYWNoZSwgY3JlYXRlSW50bEZvcm1hdHRlcnMgYXMgX2NyZWF0ZUludGxGb3JtYXR0ZXJzLCBjcmVhdGVUcmFuc2xhdG9yLCBoYXNMb2NhbGUgfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVzb2x2ZU5hbWVzcGFjZSIsImUiLCJjcmVhdGVCYXNlVHJhbnNsYXRvciIsImYiLCJkZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrIiwiYiIsImNyZWF0ZUludGxGb3JtYXR0ZXJzIiwiZCIsImNyZWF0ZUNhY2hlIiwiZyIsImRlZmF1bHRPbkVycm9yIiwiSSIsIkludGxFcnJvciIsImEiLCJJbnRsRXJyb3JDb2RlIiwiYyIsImNyZWF0ZUZvcm1hdHRlciIsImkiLCJpbml0aWFsaXplQ29uZmlnIiwiY3JlYXRlVHJhbnNsYXRvckltcGwiLCJtZXNzYWdlcyIsIm5hbWVzcGFjZSIsInJlc3QiLCJuYW1lc3BhY2VQcmVmaXgiLCJjcmVhdGVUcmFuc2xhdG9yIiwiX2NhY2hlIiwiX2Zvcm1hdHRlcnMiLCJnZXRNZXNzYWdlRmFsbGJhY2siLCJvbkVycm9yIiwiY2FjaGUiLCJmb3JtYXR0ZXJzIiwiaGFzTG9jYWxlIiwibG9jYWxlcyIsImNhbmRpZGF0ZSIsImluY2x1ZGVzIiwiX2NyZWF0ZUNhY2hlIiwiX2NyZWF0ZUludGxGb3JtYXR0ZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/esm/development/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/esm/development/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/use-intl/dist/esm/development/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlError: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   IntlErrorCode: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   IntlProvider: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.IntlProvider),\n/* harmony export */   _createCache: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   _createIntlFormatters: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createFormatter: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createTranslator: () => (/* reexport safe */ _core_js__WEBPACK_IMPORTED_MODULE_1__.createTranslator),\n/* harmony export */   hasLocale: () => (/* reexport safe */ _core_js__WEBPACK_IMPORTED_MODULE_1__.hasLocale),\n/* harmony export */   initializeConfig: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   useFormatter: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.useFormatter),\n/* harmony export */   useLocale: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.useLocale),\n/* harmony export */   useMessages: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.useMessages),\n/* harmony export */   useNow: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.useNow),\n/* harmony export */   useTimeZone: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.useTimeZone),\n/* harmony export */   useTranslations: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.useTranslations)\n/* harmony export */ });\n/* harmony import */ var _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initializeConfig-DPFnvsUO.js */ \"(ssr)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/use-intl/dist/esm/development/core.js\");\n/* harmony import */ var _react_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./react.js */ \"(ssr)/./node_modules/use-intl/dist/esm/development/react.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9lc20vZGV2ZWxvcG1lbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdMO0FBQ3hIO0FBQzhEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyLWltcG9ydC1sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZXNtL2RldmVsb3BtZW50L2luZGV4LmpzP2VkZTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgSSBhcyBJbnRsRXJyb3IsIGEgYXMgSW50bEVycm9yQ29kZSwgZCBhcyBfY3JlYXRlQ2FjaGUsIGIgYXMgX2NyZWF0ZUludGxGb3JtYXR0ZXJzLCBjIGFzIGNyZWF0ZUZvcm1hdHRlciwgaSBhcyBpbml0aWFsaXplQ29uZmlnIH0gZnJvbSAnLi9pbml0aWFsaXplQ29uZmlnLURQRm52c1VPLmpzJztcbmV4cG9ydCB7IGNyZWF0ZVRyYW5zbGF0b3IsIGhhc0xvY2FsZSB9IGZyb20gJy4vY29yZS5qcyc7XG5leHBvcnQgeyBJbnRsUHJvdmlkZXIsIHVzZUZvcm1hdHRlciwgdXNlTG9jYWxlLCB1c2VNZXNzYWdlcywgdXNlTm93LCB1c2VUaW1lWm9uZSwgdXNlVHJhbnNsYXRpb25zIH0gZnJvbSAnLi9yZWFjdC5qcyc7XG5cblxuXG5cbiJdLCJuYW1lcyI6WyJJIiwiSW50bEVycm9yIiwiYSIsIkludGxFcnJvckNvZGUiLCJkIiwiX2NyZWF0ZUNhY2hlIiwiYiIsIl9jcmVhdGVJbnRsRm9ybWF0dGVycyIsImMiLCJjcmVhdGVGb3JtYXR0ZXIiLCJpIiwiaW5pdGlhbGl6ZUNvbmZpZyIsImNyZWF0ZVRyYW5zbGF0b3IiLCJoYXNMb2NhbGUiLCJJbnRsUHJvdmlkZXIiLCJ1c2VGb3JtYXR0ZXIiLCJ1c2VMb2NhbGUiLCJ1c2VNZXNzYWdlcyIsInVzZU5vdyIsInVzZVRpbWVab25lIiwidXNlVHJhbnNsYXRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/esm/development/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   I: () => (/* binding */ IntlError),\n/* harmony export */   a: () => (/* binding */ IntlErrorCode),\n/* harmony export */   b: () => (/* binding */ createIntlFormatters),\n/* harmony export */   c: () => (/* binding */ createFormatter),\n/* harmony export */   d: () => (/* binding */ createCache),\n/* harmony export */   e: () => (/* binding */ createBaseTranslator),\n/* harmony export */   f: () => (/* binding */ defaultGetMessageFallback),\n/* harmony export */   g: () => (/* binding */ defaultOnError),\n/* harmony export */   i: () => (/* binding */ initializeConfig),\n/* harmony export */   r: () => (/* binding */ resolveNamespace)\n/* harmony export */ });\n/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/src/core.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js\");\n\n\n\nclass IntlError extends Error {\n    constructor(code, originalMessage){\n        let message = code;\n        if (originalMessage) {\n            message += \": \" + originalMessage;\n        }\n        super(message);\n        this.code = code;\n        if (originalMessage) {\n            this.originalMessage = originalMessage;\n        }\n    }\n}\nvar IntlErrorCode = /*#__PURE__*/ function(IntlErrorCode) {\n    IntlErrorCode[\"MISSING_MESSAGE\"] = \"MISSING_MESSAGE\";\n    IntlErrorCode[\"MISSING_FORMAT\"] = \"MISSING_FORMAT\";\n    IntlErrorCode[\"ENVIRONMENT_FALLBACK\"] = \"ENVIRONMENT_FALLBACK\";\n    IntlErrorCode[\"INSUFFICIENT_PATH\"] = \"INSUFFICIENT_PATH\";\n    IntlErrorCode[\"INVALID_MESSAGE\"] = \"INVALID_MESSAGE\";\n    IntlErrorCode[\"INVALID_KEY\"] = \"INVALID_KEY\";\n    IntlErrorCode[\"FORMATTING_ERROR\"] = \"FORMATTING_ERROR\";\n    return IntlErrorCode;\n}(IntlErrorCode || {});\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */ function convertFormatsToIntlMessageFormat(globalFormats, inlineFormats, timeZone) {\n    const mfDateDefaults = intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.formats.date;\n    const mfTimeDefaults = intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.formats.time;\n    const dateTimeFormats = {\n        ...globalFormats?.dateTime,\n        ...inlineFormats?.dateTime\n    };\n    const allFormats = {\n        date: {\n            ...mfDateDefaults,\n            ...dateTimeFormats\n        },\n        time: {\n            ...mfTimeDefaults,\n            ...dateTimeFormats\n        },\n        number: {\n            ...globalFormats?.number,\n            ...inlineFormats?.number\n        }\n    };\n    if (timeZone) {\n        // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n        // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n        [\n            \"date\",\n            \"time\"\n        ].forEach((property)=>{\n            const formats = allFormats[property];\n            for (const [key, value] of Object.entries(formats)){\n                formats[key] = {\n                    timeZone,\n                    ...value\n                };\n            }\n        });\n    }\n    return allFormats;\n}\nfunction joinPath(...parts) {\n    return parts.filter(Boolean).join(\".\");\n}\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */ function defaultGetMessageFallback(props) {\n    return joinPath(props.namespace, props.key);\n}\nfunction defaultOnError(error) {\n    console.error(error);\n}\nfunction createCache() {\n    return {\n        dateTime: {},\n        number: {},\n        message: {},\n        relativeTime: {},\n        pluralRules: {},\n        list: {},\n        displayNames: {}\n    };\n}\nfunction createMemoCache(store) {\n    return {\n        create () {\n            return {\n                get (key) {\n                    return store[key];\n                },\n                set (key, value) {\n                    store[key] = value;\n                }\n            };\n        }\n    };\n}\nfunction memoFn(fn, cache) {\n    return (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_1__.memoize)(fn, {\n        cache: createMemoCache(cache),\n        strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_1__.strategies.variadic\n    });\n}\nfunction memoConstructor(ConstructorFn, cache) {\n    return memoFn((...args)=>new ConstructorFn(...args), cache);\n}\nfunction createIntlFormatters(cache) {\n    const getDateTimeFormat = memoConstructor(Intl.DateTimeFormat, cache.dateTime);\n    const getNumberFormat = memoConstructor(Intl.NumberFormat, cache.number);\n    const getPluralRules = memoConstructor(Intl.PluralRules, cache.pluralRules);\n    const getRelativeTimeFormat = memoConstructor(Intl.RelativeTimeFormat, cache.relativeTime);\n    const getListFormat = memoConstructor(Intl.ListFormat, cache.list);\n    const getDisplayNames = memoConstructor(Intl.DisplayNames, cache.displayNames);\n    return {\n        getDateTimeFormat,\n        getNumberFormat,\n        getPluralRules,\n        getRelativeTimeFormat,\n        getListFormat,\n        getDisplayNames\n    };\n}\n// Placed here for improved tree shaking. Somehow when this is placed in\n// `formatters.tsx`, then it can't be shaken off from `next-intl`.\nfunction createMessageFormatter(cache, intlFormatters) {\n    const getMessageFormat = memoFn((...args)=>new intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat(args[0], args[1], args[2], {\n            formatters: intlFormatters,\n            ...args[3]\n        }), cache.message);\n    return getMessageFormat;\n}\nfunction resolvePath(locale, messages, key, namespace) {\n    const fullKey = joinPath(namespace, key);\n    if (!messages) {\n        throw new Error(`No messages available at \\`${namespace}\\`.`);\n    }\n    let message = messages;\n    key.split(\".\").forEach((part)=>{\n        const next = message[part];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (part == null || next == null) {\n            throw new Error(`Could not resolve \\`${fullKey}\\` in messages for locale \\`${locale}\\`.`);\n        }\n        message = next;\n    });\n    return message;\n}\nfunction prepareTranslationValues(values) {\n    // Workaround for https://github.com/formatjs/formatjs/issues/1467\n    const transformedValues = {};\n    Object.keys(values).forEach((key)=>{\n        let index = 0;\n        const value = values[key];\n        let transformed;\n        if (typeof value === \"function\") {\n            transformed = (chunks)=>{\n                const result = value(chunks);\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(result) ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(result, {\n                    key: key + index++\n                }) : result;\n            };\n        } else {\n            transformed = value;\n        }\n        transformedValues[key] = transformed;\n    });\n    return transformedValues;\n}\nfunction getMessagesOrError(locale, messages, namespace, onError = defaultOnError) {\n    try {\n        if (!messages) {\n            throw new Error(`No messages were configured.`);\n        }\n        const retrievedMessages = namespace ? resolvePath(locale, messages, namespace) : messages;\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!retrievedMessages) {\n            throw new Error(`No messages for namespace \\`${namespace}\\` found.`);\n        }\n        return retrievedMessages;\n    } catch (error) {\n        const intlError = new IntlError(IntlErrorCode.MISSING_MESSAGE, error.message);\n        onError(intlError);\n        return intlError;\n    }\n}\nfunction getPlainMessage(candidate, values) {\n    // To improve runtime performance, only compile message if:\n    return(// 1. Values are provided\n    values || // 2. There are escaped braces (e.g. \"'{name'}\")\n    /'[{}]/.test(candidate) || // 3. There are missing arguments or tags (dev-only error handling)\n    /<|{/.test(candidate) ? undefined // Compile\n     : candidate // Don't compile\n    );\n}\nfunction createBaseTranslator(config) {\n    const messagesOrError = getMessagesOrError(config.locale, config.messages, config.namespace, config.onError);\n    return createBaseTranslatorImpl({\n        ...config,\n        messagesOrError\n    });\n}\nfunction createBaseTranslatorImpl({ cache, formats: globalFormats, formatters, getMessageFallback = defaultGetMessageFallback, locale, messagesOrError, namespace, onError, timeZone }) {\n    const hasMessagesError = messagesOrError instanceof IntlError;\n    function getFallbackFromErrorAndNotify(key, code, message) {\n        const error = new IntlError(code, message);\n        onError(error);\n        return getMessageFallback({\n            error,\n            key,\n            namespace\n        });\n    }\n    function translateBaseFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        if (hasMessagesError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        let message;\n        try {\n            message = resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n        if (typeof message === \"object\") {\n            let code, errorMessage;\n            if (Array.isArray(message)) {\n                code = IntlErrorCode.INVALID_MESSAGE;\n                {\n                    errorMessage = `Message at \\`${joinPath(namespace, key)}\\` resolved to an array, but only strings are supported. See https://next-intl.dev/docs/usage/messages#arrays-of-messages`;\n                }\n            } else {\n                code = IntlErrorCode.INSUFFICIENT_PATH;\n                {\n                    errorMessage = `Message at \\`${joinPath(namespace, key)}\\` resolved to an object, but only strings are supported. Use a \\`.\\` to retrieve nested messages. See https://next-intl.dev/docs/usage/messages#structuring-messages`;\n                }\n            }\n            return getFallbackFromErrorAndNotify(key, code, errorMessage);\n        }\n        let messageFormat;\n        // Hot path that avoids creating an `IntlMessageFormat` instance\n        const plainMessage = getPlainMessage(message, values);\n        if (plainMessage) return plainMessage;\n        // Lazy init the message formatter for better tree\n        // shaking in case message formatting is not used.\n        if (!formatters.getMessageFormat) {\n            formatters.getMessageFormat = createMessageFormatter(cache, formatters);\n        }\n        try {\n            messageFormat = formatters.getMessageFormat(message, locale, convertFormatsToIntlMessageFormat(globalFormats, formats, timeZone), {\n                formatters: {\n                    ...formatters,\n                    getDateTimeFormat (locales, options) {\n                        // Workaround for https://github.com/formatjs/formatjs/issues/4279\n                        return formatters.getDateTimeFormat(locales, {\n                            timeZone,\n                            ...options\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            const thrownError = error;\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.INVALID_MESSAGE, thrownError.message + (\"originalMessage\" in thrownError ? ` (${thrownError.originalMessage})` : \"\"));\n        }\n        try {\n            const formattedMessage = messageFormat.format(// @ts-expect-error `intl-messageformat` expects a different format\n            // for rich text elements since a recent minor update. This\n            // needs to be evaluated in detail, possibly also in regards\n            // to be able to format to parts.\n            values ? prepareTranslationValues(values) : values);\n            if (formattedMessage == null) {\n                throw new Error(`Unable to format \\`${key}\\` in ${namespace ? `namespace \\`${namespace}\\`` : \"messages\"}`);\n            }\n            // Limit the function signature to return strings or React elements\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(formattedMessage) || // Arrays of React elements\n            Array.isArray(formattedMessage) || typeof formattedMessage === \"string\" ? formattedMessage : String(formattedMessage);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.FORMATTING_ERROR, error.message);\n        }\n    }\n    function translateFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        const result = translateBaseFn(key, values, formats);\n        if (typeof result !== \"string\") {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.INVALID_MESSAGE, `The message \\`${key}\\` in ${namespace ? `namespace \\`${namespace}\\`` : \"messages\"} didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`);\n        }\n        return result;\n    }\n    translateFn.rich = translateBaseFn;\n    // Augment `translateBaseFn` to return plain strings\n    translateFn.markup = (key, values, formats)=>{\n        const result = translateBaseFn(key, // @ts-expect-error -- `MarkupTranslationValues` is practically a sub type\n        // of `RichTranslationValues` but TypeScript isn't smart enough here.\n        values, formats);\n        if (typeof result !== \"string\") {\n            const error = new IntlError(IntlErrorCode.FORMATTING_ERROR, \"`t.markup` only accepts functions for formatting that receive and return strings.\\n\\nE.g. t.markup('markup', {b: (chunks) => `<b>${chunks}</b>`})\");\n            onError(error);\n            return getMessageFallback({\n                error,\n                key,\n                namespace\n            });\n        }\n        return result;\n    };\n    translateFn.raw = (key)=>{\n        if (hasMessagesError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        try {\n            return resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n    };\n    translateFn.has = (key)=>{\n        if (hasMessagesError) {\n            return false;\n        }\n        try {\n            resolvePath(locale, messagesOrError, key, namespace);\n            return true;\n        } catch  {\n            return false;\n        }\n    };\n    return translateFn;\n}\n/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */ function resolveNamespace(namespace, namespacePrefix) {\n    return namespace === namespacePrefix ? undefined : namespace.slice((namespacePrefix + \".\").length);\n}\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst QUARTER = MONTH * 3;\nconst YEAR = DAY * 365;\nconst UNIT_SECONDS = {\n    second: SECOND,\n    seconds: SECOND,\n    minute: MINUTE,\n    minutes: MINUTE,\n    hour: HOUR,\n    hours: HOUR,\n    day: DAY,\n    days: DAY,\n    week: WEEK,\n    weeks: WEEK,\n    month: MONTH,\n    months: MONTH,\n    quarter: QUARTER,\n    quarters: QUARTER,\n    year: YEAR,\n    years: YEAR\n};\nfunction resolveRelativeTimeUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return \"second\";\n    } else if (absValue < HOUR) {\n        return \"minute\";\n    } else if (absValue < DAY) {\n        return \"hour\";\n    } else if (absValue < WEEK) {\n        return \"day\";\n    } else if (absValue < MONTH) {\n        return \"week\";\n    } else if (absValue < YEAR) {\n        return \"month\";\n    }\n    return \"year\";\n}\nfunction calculateRelativeTimeValue(seconds, unit) {\n    // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n    // will include fractions like '2.1 hours ago'.\n    return Math.round(seconds / UNIT_SECONDS[unit]);\n}\nfunction createFormatter(props) {\n    const { _cache: cache = createCache(), _formatters: formatters = createIntlFormatters(cache), formats, locale, onError = defaultOnError, timeZone: globalTimeZone } = props;\n    function applyTimeZone(options) {\n        if (!options?.timeZone) {\n            if (globalTimeZone) {\n                options = {\n                    ...options,\n                    timeZone: globalTimeZone\n                };\n            } else {\n                onError(new IntlError(IntlErrorCode.ENVIRONMENT_FALLBACK, `The \\`timeZone\\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl.dev/docs/configuration#time-zone`));\n            }\n        }\n        return options;\n    }\n    function resolveFormatOrOptions(typeFormats, formatOrOptions, overrides) {\n        let options;\n        if (typeof formatOrOptions === \"string\") {\n            const formatName = formatOrOptions;\n            options = typeFormats?.[formatName];\n            if (!options) {\n                const error = new IntlError(IntlErrorCode.MISSING_FORMAT, `Format \\`${formatName}\\` is not available.`);\n                onError(error);\n                throw error;\n            }\n        } else {\n            options = formatOrOptions;\n        }\n        if (overrides) {\n            options = {\n                ...options,\n                ...overrides\n            };\n        }\n        return options;\n    }\n    function getFormattedValue(formatOrOptions, overrides, typeFormats, formatter, getFallback) {\n        let options;\n        try {\n            options = resolveFormatOrOptions(typeFormats, formatOrOptions, overrides);\n        } catch  {\n            return getFallback();\n        }\n        try {\n            return formatter(options);\n        } catch (error) {\n            onError(new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message));\n            return getFallback();\n        }\n    }\n    function dateTime(value, formatOrOptions, overrides) {\n        return getFormattedValue(formatOrOptions, overrides, formats?.dateTime, (options)=>{\n            options = applyTimeZone(options);\n            return formatters.getDateTimeFormat(locale, options).format(value);\n        }, ()=>String(value));\n    }\n    function dateTimeRange(start, end, formatOrOptions, overrides) {\n        return getFormattedValue(formatOrOptions, overrides, formats?.dateTime, (options)=>{\n            options = applyTimeZone(options);\n            return formatters.getDateTimeFormat(locale, options).formatRange(start, end);\n        }, ()=>[\n                dateTime(start),\n                dateTime(end)\n            ].join(\" – \"));\n    }\n    function number(value, formatOrOptions, overrides) {\n        return getFormattedValue(formatOrOptions, overrides, formats?.number, (options)=>formatters.getNumberFormat(locale, options).format(value), ()=>String(value));\n    }\n    function getGlobalNow() {\n        // Only read when necessary to avoid triggering a `dynamicIO` error\n        // unnecessarily (`now` is only needed for `format.relativeTime`)\n        if (props.now) {\n            return props.now;\n        } else {\n            onError(new IntlError(IntlErrorCode.ENVIRONMENT_FALLBACK, `The \\`now\\` parameter wasn't provided to \\`relativeTime\\` and there is no global default configured, therefore the current time will be used as a fallback. See https://next-intl.dev/docs/usage/dates-times#relative-times-usenow`));\n            return new Date();\n        }\n    }\n    function relativeTime(date, nowOrOptions) {\n        try {\n            let nowDate, unit;\n            const opts = {};\n            if (nowOrOptions instanceof Date || typeof nowOrOptions === \"number\") {\n                nowDate = new Date(nowOrOptions);\n            } else if (nowOrOptions) {\n                if (nowOrOptions.now != null) {\n                    nowDate = new Date(nowOrOptions.now);\n                } else {\n                    nowDate = getGlobalNow();\n                }\n                unit = nowOrOptions.unit;\n                opts.style = nowOrOptions.style;\n                // @ts-expect-error -- Types are slightly outdated\n                opts.numberingSystem = nowOrOptions.numberingSystem;\n            }\n            if (!nowDate) {\n                nowDate = getGlobalNow();\n            }\n            const dateDate = new Date(date);\n            const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n            if (!unit) {\n                unit = resolveRelativeTimeUnit(seconds);\n            }\n            // `numeric: 'auto'` can theoretically produce output like \"yesterday\",\n            // but it only works with integers. E.g. -1 day will produce \"yesterday\",\n            // but -1.1 days will produce \"-1.1 days\". Rounding before formatting is\n            // not desired, as the given dates might cross a threshold were the\n            // output isn't correct anymore. Example: 2024-01-08T23:00:00.000Z and\n            // 2024-01-08T01:00:00.000Z would produce \"yesterday\", which is not the\n            // case. By using `always` we can ensure correct output. The only exception\n            // is the formatting of times <1 second as \"now\".\n            opts.numeric = unit === \"second\" ? \"auto\" : \"always\";\n            const value = calculateRelativeTimeValue(seconds, unit);\n            return formatters.getRelativeTimeFormat(locale, opts).format(value, unit);\n        } catch (error) {\n            onError(new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message));\n            return String(date);\n        }\n    }\n    function list(value, formatOrOptions, overrides) {\n        const serializedValue = [];\n        const richValues = new Map();\n        // `formatToParts` only accepts strings, therefore we have to temporarily\n        // replace React elements with a placeholder ID that can be used to retrieve\n        // the original value afterwards.\n        let index = 0;\n        for (const item of value){\n            let serializedItem;\n            if (typeof item === \"object\") {\n                serializedItem = String(index);\n                richValues.set(serializedItem, item);\n            } else {\n                serializedItem = String(item);\n            }\n            serializedValue.push(serializedItem);\n            index++;\n        }\n        return getFormattedValue(formatOrOptions, overrides, formats?.list, // @ts-expect-error -- `richValues.size` is used to determine the return type, but TypeScript can't infer the meaning of this correctly\n        (options)=>{\n            const result = formatters.getListFormat(locale, options).formatToParts(serializedValue).map((part)=>part.type === \"literal\" ? part.value : richValues.get(part.value) || part.value);\n            if (richValues.size > 0) {\n                return result;\n            } else {\n                return result.join(\"\");\n            }\n        }, ()=>String(value));\n    }\n    return {\n        dateTime,\n        number,\n        relativeTime,\n        list,\n        dateTimeRange\n    };\n}\nfunction validateMessagesSegment(messages, invalidKeyLabels, parentPath) {\n    Object.entries(messages).forEach(([key, messageOrMessages])=>{\n        if (key.includes(\".\")) {\n            let keyLabel = key;\n            if (parentPath) keyLabel += ` (at ${parentPath})`;\n            invalidKeyLabels.push(keyLabel);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (messageOrMessages != null && typeof messageOrMessages === \"object\") {\n            validateMessagesSegment(messageOrMessages, invalidKeyLabels, joinPath(parentPath, key));\n        }\n    });\n}\nfunction validateMessages(messages, onError) {\n    const invalidKeyLabels = [];\n    validateMessagesSegment(messages, invalidKeyLabels);\n    if (invalidKeyLabels.length > 0) {\n        onError(new IntlError(IntlErrorCode.INVALID_KEY, `Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\n\nInvalid ${invalidKeyLabels.length === 1 ? \"key\" : \"keys\"}: ${invalidKeyLabels.join(\", \")}\n\nIf you're migrating from a flat structure, you can convert your messages as follows:\n\nimport {set} from \"lodash\";\n\nconst input = {\n  \"one.one\": \"1.1\",\n  \"one.two\": \"1.2\",\n  \"two.one.one\": \"2.1.1\"\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n\n// Output:\n//\n// {\n//   \"one\": {\n//     \"one\": \"1.1\",\n//     \"two\": \"1.2\"\n//   },\n//   \"two\": {\n//     \"one\": {\n//       \"one\": \"2.1.1\"\n//     }\n//   }\n// }\n`));\n    }\n}\n/**\n * Enhances the incoming props with defaults.\n */ function initializeConfig({ formats, getMessageFallback, messages, onError, ...rest }) {\n    const finalOnError = onError || defaultOnError;\n    const finalGetMessageFallback = getMessageFallback || defaultGetMessageFallback;\n    {\n        if (messages) {\n            validateMessages(messages, finalOnError);\n        }\n    }\n    return {\n        ...rest,\n        formats: formats || undefined,\n        messages: messages || undefined,\n        onError: finalOnError,\n        getMessageFallback: finalGetMessageFallback\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9lc20vZGV2ZWxvcG1lbnQvaW5pdGlhbGl6ZUNvbmZpZy1EUEZudnNVTy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQXVEO0FBQ0Y7QUFDUTtBQUU3RCxNQUFNSyxrQkFBa0JDO0lBQ3RCQyxZQUFZQyxJQUFJLEVBQUVDLGVBQWUsQ0FBRTtRQUNqQyxJQUFJQyxVQUFVRjtRQUNkLElBQUlDLGlCQUFpQjtZQUNuQkMsV0FBVyxPQUFPRDtRQUNwQjtRQUNBLEtBQUssQ0FBQ0M7UUFDTixJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJQyxpQkFBaUI7WUFDbkIsSUFBSSxDQUFDQSxlQUFlLEdBQUdBO1FBQ3pCO0lBQ0Y7QUFDRjtBQUVBLElBQUlFLGdCQUFnQixXQUFXLEdBQUUsU0FBVUEsYUFBYTtJQUN0REEsYUFBYSxDQUFDLGtCQUFrQixHQUFHO0lBQ25DQSxhQUFhLENBQUMsaUJBQWlCLEdBQUc7SUFDbENBLGFBQWEsQ0FBQyx1QkFBdUIsR0FBRztJQUN4Q0EsYUFBYSxDQUFDLG9CQUFvQixHQUFHO0lBQ3JDQSxhQUFhLENBQUMsa0JBQWtCLEdBQUc7SUFDbkNBLGFBQWEsQ0FBQyxjQUFjLEdBQUc7SUFDL0JBLGFBQWEsQ0FBQyxtQkFBbUIsR0FBRztJQUNwQyxPQUFPQTtBQUNULEVBQUVBLGlCQUFpQixDQUFDO0FBRXBCOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLGtDQUFrQ0MsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLFFBQVE7SUFDL0UsTUFBTUMsaUJBQWlCaEIsaUVBQWlCQSxDQUFDaUIsT0FBTyxDQUFDQyxJQUFJO0lBQ3JELE1BQU1DLGlCQUFpQm5CLGlFQUFpQkEsQ0FBQ2lCLE9BQU8sQ0FBQ0csSUFBSTtJQUNyRCxNQUFNQyxrQkFBa0I7UUFDdEIsR0FBR1IsZUFBZVMsUUFBUTtRQUMxQixHQUFHUixlQUFlUSxRQUFRO0lBQzVCO0lBQ0EsTUFBTUMsYUFBYTtRQUNqQkws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O1FBRUEsdUVBQXVFO1FBQ3ZFLElBQUlGLHFCQUFxQixRQUFRLE9BQU9BLHNCQUFzQixVQUFVO1lBQ3RFSCx3QkFBd0JHLG1CQUFtQkYsa0JBQWtCL0ssU0FBU2dMLFlBQVlwTDtRQUNwRjtJQUNGO0FBQ0Y7QUFDQSxTQUFTd0wsaUJBQWlCbkksUUFBUSxFQUFFYyxPQUFPO0lBQ3pDLE1BQU1nSCxtQkFBbUIsRUFBRTtJQUMzQkQsd0JBQXdCN0gsVUFBVThIO0lBQ2xDLElBQUlBLGlCQUFpQjFFLE1BQU0sR0FBRyxHQUFHO1FBQy9CdEMsUUFBUSxJQUFJekYsVUFBVU0sY0FBY3lNLFdBQVcsRUFBRSxDQUFDOztRQUU5QyxFQUFFTixpQkFBaUIxRSxNQUFNLEtBQUssSUFBSSxRQUFRLE9BQU8sRUFBRSxFQUFFMEUsaUJBQWlCM0ssSUFBSSxDQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCekYsQ0FBQztJQUNDO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVNrTCxpQkFBaUIsRUFDeEJwTSxPQUFPLEVBQ1B5RixrQkFBa0IsRUFDbEIxQixRQUFRLEVBQ1JjLE9BQU8sRUFDUCxHQUFHd0gsTUFDSjtJQUNDLE1BQU1DLGVBQWV6SCxXQUFXdkQ7SUFDaEMsTUFBTWlMLDBCQUEwQjlHLHNCQUFzQnRFO0lBQ3REO1FBQ0UsSUFBSTRDLFVBQVU7WUFDWm1JLGlCQUFpQm5JLFVBQVV1STtRQUM3QjtJQUNGO0lBQ0EsT0FBTztRQUNMLEdBQUdELElBQUk7UUFDUHJNLFNBQVNBLFdBQVdvRjtRQUNwQnJCLFVBQVVBLFlBQVlxQjtRQUN0QlAsU0FBU3lIO1FBQ1Q3RyxvQkFBb0I4RztJQUN0QjtBQUNGO0FBRStPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyLWltcG9ydC1sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZXNtL2RldmVsb3BtZW50L2luaXRpYWxpemVDb25maWctRFBGbnZzVU8uanM/YmI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRsTWVzc2FnZUZvcm1hdCB9IGZyb20gJ2ludGwtbWVzc2FnZWZvcm1hdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudCwgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWVtb2l6ZSwgc3RyYXRlZ2llcyB9IGZyb20gJ0Bmb3JtYXRqcy9mYXN0LW1lbW9pemUnO1xuXG5jbGFzcyBJbnRsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNvZGUsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgIGxldCBtZXNzYWdlID0gY29kZTtcbiAgICBpZiAob3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICBtZXNzYWdlICs9ICc6ICcgKyBvcmlnaW5hbE1lc3NhZ2U7XG4gICAgfVxuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgaWYgKG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBvcmlnaW5hbE1lc3NhZ2U7XG4gICAgfVxuICB9XG59XG5cbnZhciBJbnRsRXJyb3JDb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChJbnRsRXJyb3JDb2RlKSB7XG4gIEludGxFcnJvckNvZGVbXCJNSVNTSU5HX01FU1NBR0VcIl0gPSBcIk1JU1NJTkdfTUVTU0FHRVwiO1xuICBJbnRsRXJyb3JDb2RlW1wiTUlTU0lOR19GT1JNQVRcIl0gPSBcIk1JU1NJTkdfRk9STUFUXCI7XG4gIEludGxFcnJvckNvZGVbXCJFTlZJUk9OTUVOVF9GQUxMQkFDS1wiXSA9IFwiRU5WSVJPTk1FTlRfRkFMTEJBQ0tcIjtcbiAgSW50bEVycm9yQ29kZVtcIklOU1VGRklDSUVOVF9QQVRIXCJdID0gXCJJTlNVRkZJQ0lFTlRfUEFUSFwiO1xuICBJbnRsRXJyb3JDb2RlW1wiSU5WQUxJRF9NRVNTQUdFXCJdID0gXCJJTlZBTElEX01FU1NBR0VcIjtcbiAgSW50bEVycm9yQ29kZVtcIklOVkFMSURfS0VZXCJdID0gXCJJTlZBTElEX0tFWVwiO1xuICBJbnRsRXJyb3JDb2RlW1wiRk9STUFUVElOR19FUlJPUlwiXSA9IFwiRk9STUFUVElOR19FUlJPUlwiO1xuICByZXR1cm4gSW50bEVycm9yQ29kZTtcbn0oSW50bEVycm9yQ29kZSB8fCB7fSk7XG5cbi8qKlxuICogYGludGwtbWVzc2FnZWZvcm1hdGAgdXNlcyBzZXBhcmF0ZSBrZXlzIGZvciBgZGF0ZWAgYW5kIGB0aW1lYCwgYnV0IHRoZXJlJ3NcbiAqIG9ubHkgb25lIG5hdGl2ZSBBUEk6IGBJbnRsLkRhdGVUaW1lRm9ybWF0YC4gQWRkaXRpb25hbGx5IHlvdSBtaWdodCB3YW50IHRvXG4gKiBpbmNsdWRlIGJvdGggYSB0aW1lIGFuZCBhIGRhdGUgaW4gYSB2YWx1ZSwgdGhlcmVmb3JlIHRoZSBzZXBhcmF0aW9uIGRvZXNuJ3RcbiAqIHNlZW0gc28gdXNlZnVsLiBXZSBvZmZlciBhIHNpbmdsZSBgZGF0ZVRpbWVgIG5hbWVzcGFjZSBpbnN0ZWFkLCBidXQgd2UgaGF2ZVxuICogdG8gY29udmVydCB0aGUgZm9ybWF0IGJlZm9yZSBgaW50bC1tZXNzYWdlZm9ybWF0YCBjYW4gYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gY29udmVydEZvcm1hdHNUb0ludGxNZXNzYWdlRm9ybWF0KGdsb2JhbEZvcm1hdHMsIGlubGluZUZvcm1hdHMsIHRpbWVab25lKSB7XG4gIGNvbnN0IG1mRGF0ZURlZmF1bHRzID0gSW50bE1lc3NhZ2VGb3JtYXQuZm9ybWF0cy5kYXRlO1xuICBjb25zdCBtZlRpbWVEZWZhdWx0cyA9IEludGxNZXNzYWdlRm9ybWF0LmZvcm1hdHMudGltZTtcbiAgY29uc3QgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICAgIC4uLmdsb2JhbEZvcm1hdHM/LmRhdGVUaW1lLFxuICAgIC4uLmlubGluZUZvcm1hdHM/LmRhdGVUaW1lXG4gIH07XG4gIGNvbnN0IGFsbEZvcm1hdHMgPSB7XG4gICAgZGF0ZToge1xuICAgICAgLi4ubWZEYXRlRGVmYXVsdHMsXG4gICAgICAuLi5kYXRlVGltZUZvcm1hdHNcbiAgICB9LFxuICAgIHRpbWU6IHtcbiAgICAgIC4uLm1mVGltZURlZmF1bHRzLFxuICAgICAgLi4uZGF0ZVRpbWVGb3JtYXRzXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgIC4uLmdsb2JhbEZvcm1hdHM/Lm51bWJlcixcbiAgICAgIC4uLmlubGluZUZvcm1hdHM/Lm51bWJlclxuICAgIH1cbiAgICAvLyAobGlzdCBpcyBub3Qgc3VwcG9ydGVkIGluIElDVSBtZXNzYWdlcylcbiAgfTtcbiAgaWYgKHRpbWVab25lKSB7XG4gICAgLy8gVGhlIG9ubHkgd2F5IHRvIHNldCBhIHRpbWUgem9uZSB3aXRoIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGlzIHRvIG1lcmdlIGl0IGludG8gdGhlIGZvcm1hdHNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvZm9ybWF0anMvYmxvYi84MjU2YzUyNzE1MDVjZjI2MDZlNDhlM2M5N2VjZGQxNmVkZTRmMWI1L3BhY2thZ2VzL2ludGwvc3JjL21lc3NhZ2UudHMjTDE1XG4gICAgWydkYXRlJywgJ3RpbWUnXS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIGNvbnN0IGZvcm1hdHMgPSBhbGxGb3JtYXRzW3Byb3BlcnR5XTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGZvcm1hdHMpKSB7XG4gICAgICAgIGZvcm1hdHNba2V5XSA9IHtcbiAgICAgICAgICB0aW1lWm9uZSxcbiAgICAgICAgICAuLi52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBhbGxGb3JtYXRzO1xufVxuXG5mdW5jdGlvbiBqb2luUGF0aCguLi5wYXJ0cykge1xuICByZXR1cm4gcGFydHMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy4nKTtcbn1cblxuLyoqXG4gKiBDb250YWlucyBkZWZhdWx0cyB0aGF0IGFyZSB1c2VkIGZvciBhbGwgZW50cnkgcG9pbnRzIGludG8gdGhlIGNvcmUuXG4gKiBTZWUgYWxzbyBgSW5pdGlhbGl6ZWRJbnRsQ29uZmlndXJhdGlvbmAuXG4gKi9cblxuZnVuY3Rpb24gZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayhwcm9wcykge1xuICByZXR1cm4gam9pblBhdGgocHJvcHMubmFtZXNwYWNlLCBwcm9wcy5rZXkpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcihlcnJvcik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuICByZXR1cm4ge1xuICAgIGRhdGVUaW1lOiB7fSxcbiAgICBudW1iZXI6IHt9LFxuICAgIG1lc3NhZ2U6IHt9LFxuICAgIHJlbGF0aXZlVGltZToge30sXG4gICAgcGx1cmFsUnVsZXM6IHt9LFxuICAgIGxpc3Q6IHt9LFxuICAgIGRpc3BsYXlOYW1lczoge31cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9DYWNoZShzdG9yZSkge1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gc3RvcmVba2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBzdG9yZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbWVtb0ZuKGZuLCBjYWNoZSkge1xuICByZXR1cm4gbWVtb2l6ZShmbiwge1xuICAgIGNhY2hlOiBjcmVhdGVNZW1vQ2FjaGUoY2FjaGUpLFxuICAgIHN0cmF0ZWd5OiBzdHJhdGVnaWVzLnZhcmlhZGljXG4gIH0pO1xufVxuZnVuY3Rpb24gbWVtb0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yRm4sIGNhY2hlKSB7XG4gIHJldHVybiBtZW1vRm4oKC4uLmFyZ3MpID0+IG5ldyBDb25zdHJ1Y3RvckZuKC4uLmFyZ3MpLCBjYWNoZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVJbnRsRm9ybWF0dGVycyhjYWNoZSkge1xuICBjb25zdCBnZXREYXRlVGltZUZvcm1hdCA9IG1lbW9Db25zdHJ1Y3RvcihJbnRsLkRhdGVUaW1lRm9ybWF0LCBjYWNoZS5kYXRlVGltZSk7XG4gIGNvbnN0IGdldE51bWJlckZvcm1hdCA9IG1lbW9Db25zdHJ1Y3RvcihJbnRsLk51bWJlckZvcm1hdCwgY2FjaGUubnVtYmVyKTtcbiAgY29uc3QgZ2V0UGx1cmFsUnVsZXMgPSBtZW1vQ29uc3RydWN0b3IoSW50bC5QbHVyYWxSdWxlcywgY2FjaGUucGx1cmFsUnVsZXMpO1xuICBjb25zdCBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQgPSBtZW1vQ29uc3RydWN0b3IoSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQsIGNhY2hlLnJlbGF0aXZlVGltZSk7XG4gIGNvbnN0IGdldExpc3RGb3JtYXQgPSBtZW1vQ29uc3RydWN0b3IoSW50bC5MaXN0Rm9ybWF0LCBjYWNoZS5saXN0KTtcbiAgY29uc3QgZ2V0RGlzcGxheU5hbWVzID0gbWVtb0NvbnN0cnVjdG9yKEludGwuRGlzcGxheU5hbWVzLCBjYWNoZS5kaXNwbGF5TmFtZXMpO1xuICByZXR1cm4ge1xuICAgIGdldERhdGVUaW1lRm9ybWF0LFxuICAgIGdldE51bWJlckZvcm1hdCxcbiAgICBnZXRQbHVyYWxSdWxlcyxcbiAgICBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQsXG4gICAgZ2V0TGlzdEZvcm1hdCxcbiAgICBnZXREaXNwbGF5TmFtZXNcbiAgfTtcbn1cblxuLy8gUGxhY2VkIGhlcmUgZm9yIGltcHJvdmVkIHRyZWUgc2hha2luZy4gU29tZWhvdyB3aGVuIHRoaXMgaXMgcGxhY2VkIGluXG4vLyBgZm9ybWF0dGVycy50c3hgLCB0aGVuIGl0IGNhbid0IGJlIHNoYWtlbiBvZmYgZnJvbSBgbmV4dC1pbnRsYC5cbmZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2VGb3JtYXR0ZXIoY2FjaGUsIGludGxGb3JtYXR0ZXJzKSB7XG4gIGNvbnN0IGdldE1lc3NhZ2VGb3JtYXQgPSBtZW1vRm4oKC4uLmFyZ3MpID0+IG5ldyBJbnRsTWVzc2FnZUZvcm1hdChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCB7XG4gICAgZm9ybWF0dGVyczogaW50bEZvcm1hdHRlcnMsXG4gICAgLi4uYXJnc1szXVxuICB9KSwgY2FjaGUubWVzc2FnZSk7XG4gIHJldHVybiBnZXRNZXNzYWdlRm9ybWF0O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywga2V5LCBuYW1lc3BhY2UpIHtcbiAgY29uc3QgZnVsbEtleSA9IGpvaW5QYXRoKG5hbWVzcGFjZSwga2V5KTtcbiAgaWYgKCFtZXNzYWdlcykge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWVzc2FnZXMgYXZhaWxhYmxlIGF0IFxcYCR7bmFtZXNwYWNlfVxcYC5gICk7XG4gIH1cbiAgbGV0IG1lc3NhZ2UgPSBtZXNzYWdlcztcbiAga2V5LnNwbGl0KCcuJykuZm9yRWFjaChwYXJ0ID0+IHtcbiAgICBjb25zdCBuZXh0ID0gbWVzc2FnZVtwYXJ0XTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgaWYgKHBhcnQgPT0gbnVsbCB8fCBuZXh0ID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IHJlc29sdmUgXFxgJHtmdWxsS2V5fVxcYCBpbiBtZXNzYWdlcyBmb3IgbG9jYWxlIFxcYCR7bG9jYWxlfVxcYC5gICk7XG4gICAgfVxuICAgIG1lc3NhZ2UgPSBuZXh0O1xuICB9KTtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiBwcmVwYXJlVHJhbnNsYXRpb25WYWx1ZXModmFsdWVzKSB7XG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtYXRqcy9mb3JtYXRqcy9pc3N1ZXMvMTQ2N1xuICBjb25zdCB0cmFuc2Zvcm1lZFZhbHVlcyA9IHt9O1xuICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgbGV0IHRyYW5zZm9ybWVkO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyYW5zZm9ybWVkID0gY2h1bmtzID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUoY2h1bmtzKTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9pc1ZhbGlkRWxlbWVudChyZXN1bHQpID8gLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChyZXN1bHQsIHtcbiAgICAgICAgICBrZXk6IGtleSArIGluZGV4KytcbiAgICAgICAgfSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IHZhbHVlO1xuICAgIH1cbiAgICB0cmFuc2Zvcm1lZFZhbHVlc1trZXldID0gdHJhbnNmb3JtZWQ7XG4gIH0pO1xuICByZXR1cm4gdHJhbnNmb3JtZWRWYWx1ZXM7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlc09yRXJyb3IobG9jYWxlLCBtZXNzYWdlcywgbmFtZXNwYWNlLCBvbkVycm9yID0gZGVmYXVsdE9uRXJyb3IpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIW1lc3NhZ2VzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1lc3NhZ2VzIHdlcmUgY29uZmlndXJlZC5gICk7XG4gICAgfVxuICAgIGNvbnN0IHJldHJpZXZlZE1lc3NhZ2VzID0gbmFtZXNwYWNlID8gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywgbmFtZXNwYWNlKSA6IG1lc3NhZ2VzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICBpZiAoIXJldHJpZXZlZE1lc3NhZ2VzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1lc3NhZ2VzIGZvciBuYW1lc3BhY2UgXFxgJHtuYW1lc3BhY2V9XFxgIGZvdW5kLmAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHJpZXZlZE1lc3NhZ2VzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGludGxFcnJvciA9IG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5NSVNTSU5HX01FU1NBR0UsIGVycm9yLm1lc3NhZ2UpO1xuICAgIG9uRXJyb3IoaW50bEVycm9yKTtcbiAgICByZXR1cm4gaW50bEVycm9yO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQbGFpbk1lc3NhZ2UoY2FuZGlkYXRlLCB2YWx1ZXMpIHtcbiAgLy8gVG8gaW1wcm92ZSBydW50aW1lIHBlcmZvcm1hbmNlLCBvbmx5IGNvbXBpbGUgbWVzc2FnZSBpZjpcbiAgcmV0dXJuIChcbiAgICAvLyAxLiBWYWx1ZXMgYXJlIHByb3ZpZGVkXG4gICAgdmFsdWVzIHx8XG4gICAgLy8gMi4gVGhlcmUgYXJlIGVzY2FwZWQgYnJhY2VzIChlLmcuIFwiJ3tuYW1lJ31cIilcbiAgICAvJ1t7fV0vLnRlc3QoY2FuZGlkYXRlKSB8fFxuICAgIC8vIDMuIFRoZXJlIGFyZSBtaXNzaW5nIGFyZ3VtZW50cyBvciB0YWdzIChkZXYtb25seSBlcnJvciBoYW5kbGluZylcbiAgICAvPHx7Ly50ZXN0KGNhbmRpZGF0ZSkgPyB1bmRlZmluZWQgLy8gQ29tcGlsZVxuICAgIDogY2FuZGlkYXRlIC8vIERvbid0IGNvbXBpbGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUcmFuc2xhdG9yKGNvbmZpZykge1xuICBjb25zdCBtZXNzYWdlc09yRXJyb3IgPSBnZXRNZXNzYWdlc09yRXJyb3IoY29uZmlnLmxvY2FsZSwgY29uZmlnLm1lc3NhZ2VzLCBjb25maWcubmFtZXNwYWNlLCBjb25maWcub25FcnJvcik7XG4gIHJldHVybiBjcmVhdGVCYXNlVHJhbnNsYXRvckltcGwoe1xuICAgIC4uLmNvbmZpZyxcbiAgICBtZXNzYWdlc09yRXJyb3JcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVCYXNlVHJhbnNsYXRvckltcGwoe1xuICBjYWNoZSxcbiAgZm9ybWF0czogZ2xvYmFsRm9ybWF0cyxcbiAgZm9ybWF0dGVycyxcbiAgZ2V0TWVzc2FnZUZhbGxiYWNrID0gZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayxcbiAgbG9jYWxlLFxuICBtZXNzYWdlc09yRXJyb3IsXG4gIG5hbWVzcGFjZSxcbiAgb25FcnJvcixcbiAgdGltZVpvbmVcbn0pIHtcbiAgY29uc3QgaGFzTWVzc2FnZXNFcnJvciA9IG1lc3NhZ2VzT3JFcnJvciBpbnN0YW5jZW9mIEludGxFcnJvcjtcbiAgZnVuY3Rpb24gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgSW50bEVycm9yKGNvZGUsIG1lc3NhZ2UpO1xuICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiBnZXRNZXNzYWdlRmFsbGJhY2soe1xuICAgICAgZXJyb3IsXG4gICAgICBrZXksXG4gICAgICBuYW1lc3BhY2VcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB0cmFuc2xhdGVCYXNlRm4oLyoqIFVzZSBhIGRvdCB0byBpbmRpY2F0ZSBhIGxldmVsIG9mIG5lc3RpbmcgKGUuZy4gYG5hbWVzcGFjZS5uZXN0ZWRMYWJlbGApLiAqL1xuICBrZXksIC8qKiBLZXkgdmFsdWUgcGFpcnMgZm9yIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBpbnRvIHRoZSBtZXNzYWdlLiAqL1xuICB2YWx1ZXMsIC8qKiBQcm92aWRlIGN1c3RvbSBmb3JtYXRzIGZvciBudW1iZXJzLCBkYXRlcyBhbmQgdGltZXMuICovXG4gIGZvcm1hdHMpIHtcbiAgICBpZiAoaGFzTWVzc2FnZXNFcnJvcikge1xuICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBhYm91dCB0aGlzIGR1cmluZyByZW5kZXJcbiAgICAgIHJldHVybiBnZXRNZXNzYWdlRmFsbGJhY2soe1xuICAgICAgICBlcnJvcjogbWVzc2FnZXNPckVycm9yLFxuICAgICAgICBrZXksXG4gICAgICAgIG5hbWVzcGFjZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VzID0gbWVzc2FnZXNPckVycm9yO1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlID0gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywga2V5LCBuYW1lc3BhY2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBJbnRsRXJyb3JDb2RlLk1JU1NJTkdfTUVTU0FHRSwgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGxldCBjb2RlLCBlcnJvck1lc3NhZ2U7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICBjb2RlID0gSW50bEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0U7XG4gICAgICAgIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBgTWVzc2FnZSBhdCBcXGAke2pvaW5QYXRoKG5hbWVzcGFjZSwga2V5KX1cXGAgcmVzb2x2ZWQgdG8gYW4gYXJyYXksIGJ1dCBvbmx5IHN0cmluZ3MgYXJlIHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vbmV4dC1pbnRsLmRldi9kb2NzL3VzYWdlL21lc3NhZ2VzI2FycmF5cy1vZi1tZXNzYWdlc2A7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvZGUgPSBJbnRsRXJyb3JDb2RlLklOU1VGRklDSUVOVF9QQVRIO1xuICAgICAgICB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gYE1lc3NhZ2UgYXQgXFxgJHtqb2luUGF0aChuYW1lc3BhY2UsIGtleSl9XFxgIHJlc29sdmVkIHRvIGFuIG9iamVjdCwgYnV0IG9ubHkgc3RyaW5ncyBhcmUgc3VwcG9ydGVkLiBVc2UgYSBcXGAuXFxgIHRvIHJldHJpZXZlIG5lc3RlZCBtZXNzYWdlcy4gU2VlIGh0dHBzOi8vbmV4dC1pbnRsLmRldi9kb2NzL3VzYWdlL21lc3NhZ2VzI3N0cnVjdHVyaW5nLW1lc3NhZ2VzYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgY29kZSwgZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgbGV0IG1lc3NhZ2VGb3JtYXQ7XG5cbiAgICAvLyBIb3QgcGF0aCB0aGF0IGF2b2lkcyBjcmVhdGluZyBhbiBgSW50bE1lc3NhZ2VGb3JtYXRgIGluc3RhbmNlXG4gICAgY29uc3QgcGxhaW5NZXNzYWdlID0gZ2V0UGxhaW5NZXNzYWdlKG1lc3NhZ2UsIHZhbHVlcyk7XG4gICAgaWYgKHBsYWluTWVzc2FnZSkgcmV0dXJuIHBsYWluTWVzc2FnZTtcblxuICAgIC8vIExhenkgaW5pdCB0aGUgbWVzc2FnZSBmb3JtYXR0ZXIgZm9yIGJldHRlciB0cmVlXG4gICAgLy8gc2hha2luZyBpbiBjYXNlIG1lc3NhZ2UgZm9ybWF0dGluZyBpcyBub3QgdXNlZC5cbiAgICBpZiAoIWZvcm1hdHRlcnMuZ2V0TWVzc2FnZUZvcm1hdCkge1xuICAgICAgZm9ybWF0dGVycy5nZXRNZXNzYWdlRm9ybWF0ID0gY3JlYXRlTWVzc2FnZUZvcm1hdHRlcihjYWNoZSwgZm9ybWF0dGVycyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlRm9ybWF0ID0gZm9ybWF0dGVycy5nZXRNZXNzYWdlRm9ybWF0KG1lc3NhZ2UsIGxvY2FsZSwgY29udmVydEZvcm1hdHNUb0ludGxNZXNzYWdlRm9ybWF0KGdsb2JhbEZvcm1hdHMsIGZvcm1hdHMsIHRpbWVab25lKSwge1xuICAgICAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgICAgLi4uZm9ybWF0dGVycyxcbiAgICAgICAgICBnZXREYXRlVGltZUZvcm1hdChsb2NhbGVzLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvZm9ybWF0anMvaXNzdWVzLzQyNzlcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZXMsIHtcbiAgICAgICAgICAgICAgdGltZVpvbmUsXG4gICAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHRocm93bkVycm9yID0gZXJyb3I7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBJbnRsRXJyb3JDb2RlLklOVkFMSURfTUVTU0FHRSwgdGhyb3duRXJyb3IubWVzc2FnZSArICgnb3JpZ2luYWxNZXNzYWdlJyBpbiB0aHJvd25FcnJvciA/IGAgKCR7dGhyb3duRXJyb3Iub3JpZ2luYWxNZXNzYWdlfSlgIDogJycpICk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gbWVzc2FnZUZvcm1hdC5mb3JtYXQoXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGV4cGVjdHMgYSBkaWZmZXJlbnQgZm9ybWF0XG4gICAgICAvLyBmb3IgcmljaCB0ZXh0IGVsZW1lbnRzIHNpbmNlIGEgcmVjZW50IG1pbm9yIHVwZGF0ZS4gVGhpc1xuICAgICAgLy8gbmVlZHMgdG8gYmUgZXZhbHVhdGVkIGluIGRldGFpbCwgcG9zc2libHkgYWxzbyBpbiByZWdhcmRzXG4gICAgICAvLyB0byBiZSBhYmxlIHRvIGZvcm1hdCB0byBwYXJ0cy5cbiAgICAgIHZhbHVlcyA/IHByZXBhcmVUcmFuc2xhdGlvblZhbHVlcyh2YWx1ZXMpIDogdmFsdWVzKTtcbiAgICAgIGlmIChmb3JtYXR0ZWRNZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZm9ybWF0IFxcYCR7a2V5fVxcYCBpbiAke25hbWVzcGFjZSA/IGBuYW1lc3BhY2UgXFxgJHtuYW1lc3BhY2V9XFxgYCA6ICdtZXNzYWdlcyd9YCApO1xuICAgICAgfVxuXG4gICAgICAvLyBMaW1pdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIHRvIHJldHVybiBzdHJpbmdzIG9yIFJlYWN0IGVsZW1lbnRzXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2lzVmFsaWRFbGVtZW50KGZvcm1hdHRlZE1lc3NhZ2UpIHx8XG4gICAgICAvLyBBcnJheXMgb2YgUmVhY3QgZWxlbWVudHNcbiAgICAgIEFycmF5LmlzQXJyYXkoZm9ybWF0dGVkTWVzc2FnZSkgfHwgdHlwZW9mIGZvcm1hdHRlZE1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZm9ybWF0dGVkTWVzc2FnZSA6IFN0cmluZyhmb3JtYXR0ZWRNZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgSW50bEVycm9yQ29kZS5GT1JNQVRUSU5HX0VSUk9SLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNsYXRlRm4oLyoqIFVzZSBhIGRvdCB0byBpbmRpY2F0ZSBhIGxldmVsIG9mIG5lc3RpbmcgKGUuZy4gYG5hbWVzcGFjZS5uZXN0ZWRMYWJlbGApLiAqL1xuICBrZXksIC8qKiBLZXkgdmFsdWUgcGFpcnMgZm9yIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBpbnRvIHRoZSBtZXNzYWdlLiAqL1xuICB2YWx1ZXMsIC8qKiBQcm92aWRlIGN1c3RvbSBmb3JtYXRzIGZvciBudW1iZXJzLCBkYXRlcyBhbmQgdGltZXMuICovXG4gIGZvcm1hdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0cmFuc2xhdGVCYXNlRm4oa2V5LCB2YWx1ZXMsIGZvcm1hdHMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgSW50bEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0UsIGBUaGUgbWVzc2FnZSBcXGAke2tleX1cXGAgaW4gJHtuYW1lc3BhY2UgPyBgbmFtZXNwYWNlIFxcYCR7bmFtZXNwYWNlfVxcYGAgOiAnbWVzc2FnZXMnfSBkaWRuJ3QgcmVzb2x2ZSB0byBhIHN0cmluZy4gSWYgeW91IHdhbnQgdG8gZm9ybWF0IHJpY2ggdGV4dCwgdXNlIFxcYHQucmljaFxcYCBpbnN0ZWFkLmAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0cmFuc2xhdGVGbi5yaWNoID0gdHJhbnNsYXRlQmFzZUZuO1xuXG4gIC8vIEF1Z21lbnQgYHRyYW5zbGF0ZUJhc2VGbmAgdG8gcmV0dXJuIHBsYWluIHN0cmluZ3NcbiAgdHJhbnNsYXRlRm4ubWFya3VwID0gKGtleSwgdmFsdWVzLCBmb3JtYXRzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gdHJhbnNsYXRlQmFzZUZuKGtleSxcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0tIGBNYXJrdXBUcmFuc2xhdGlvblZhbHVlc2AgaXMgcHJhY3RpY2FsbHkgYSBzdWIgdHlwZVxuICAgIC8vIG9mIGBSaWNoVHJhbnNsYXRpb25WYWx1ZXNgIGJ1dCBUeXBlU2NyaXB0IGlzbid0IHNtYXJ0IGVub3VnaCBoZXJlLlxuICAgIHZhbHVlcywgZm9ybWF0cyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5GT1JNQVRUSU5HX0VSUk9SLCBcImB0Lm1hcmt1cGAgb25seSBhY2NlcHRzIGZ1bmN0aW9ucyBmb3IgZm9ybWF0dGluZyB0aGF0IHJlY2VpdmUgYW5kIHJldHVybiBzdHJpbmdzLlxcblxcbkUuZy4gdC5tYXJrdXAoJ21hcmt1cCcsIHtiOiAoY2h1bmtzKSA9PiBgPGI+JHtjaHVua3N9PC9iPmB9KVwiKTtcbiAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIGdldE1lc3NhZ2VGYWxsYmFjayh7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBrZXksXG4gICAgICAgIG5hbWVzcGFjZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHRyYW5zbGF0ZUZuLnJhdyA9IGtleSA9PiB7XG4gICAgaWYgKGhhc01lc3NhZ2VzRXJyb3IpIHtcbiAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgYWJvdXQgdGhpcyBkdXJpbmcgcmVuZGVyXG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZUZhbGxiYWNrKHtcbiAgICAgICAgZXJyb3I6IG1lc3NhZ2VzT3JFcnJvcixcbiAgICAgICAga2V5LFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlcyA9IG1lc3NhZ2VzT3JFcnJvcjtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHJlc29sdmVQYXRoKGxvY2FsZSwgbWVzc2FnZXMsIGtleSwgbmFtZXNwYWNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgSW50bEVycm9yQ29kZS5NSVNTSU5HX01FU1NBR0UsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcbiAgdHJhbnNsYXRlRm4uaGFzID0ga2V5ID0+IHtcbiAgICBpZiAoaGFzTWVzc2FnZXNFcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlc09yRXJyb3IsIGtleSwgbmFtZXNwYWNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHRyYW5zbGF0ZUZuO1xufVxuXG4vKipcbiAqIEZvciB0aGUgc3RyaWN0bHkgdHlwZWQgbWVzc2FnZXMgdG8gd29yayB3ZSBoYXZlIHRvIHdyYXAgdGhlIG5hbWVzcGFjZSBpbnRvXG4gKiBhIG1hbmRhdG9yeSBwcmVmaXguIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzE1Mjk1NzUvMzQzMDQ1XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVOYW1lc3BhY2UobmFtZXNwYWNlLCBuYW1lc3BhY2VQcmVmaXgpIHtcbiAgcmV0dXJuIG5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlUHJlZml4ID8gdW5kZWZpbmVkIDogbmFtZXNwYWNlLnNsaWNlKChuYW1lc3BhY2VQcmVmaXggKyAnLicpLmxlbmd0aCk7XG59XG5cbmNvbnN0IFNFQ09ORCA9IDE7XG5jb25zdCBNSU5VVEUgPSBTRUNPTkQgKiA2MDtcbmNvbnN0IEhPVVIgPSBNSU5VVEUgKiA2MDtcbmNvbnN0IERBWSA9IEhPVVIgKiAyNDtcbmNvbnN0IFdFRUsgPSBEQVkgKiA3O1xuY29uc3QgTU9OVEggPSBEQVkgKiAoMzY1IC8gMTIpOyAvLyBBcHByb3hpbWF0aW9uXG5jb25zdCBRVUFSVEVSID0gTU9OVEggKiAzO1xuY29uc3QgWUVBUiA9IERBWSAqIDM2NTtcbmNvbnN0IFVOSVRfU0VDT05EUyA9IHtcbiAgc2Vjb25kOiBTRUNPTkQsXG4gIHNlY29uZHM6IFNFQ09ORCxcbiAgbWludXRlOiBNSU5VVEUsXG4gIG1pbnV0ZXM6IE1JTlVURSxcbiAgaG91cjogSE9VUixcbiAgaG91cnM6IEhPVVIsXG4gIGRheTogREFZLFxuICBkYXlzOiBEQVksXG4gIHdlZWs6IFdFRUssXG4gIHdlZWtzOiBXRUVLLFxuICBtb250aDogTU9OVEgsXG4gIG1vbnRoczogTU9OVEgsXG4gIHF1YXJ0ZXI6IFFVQVJURVIsXG4gIHF1YXJ0ZXJzOiBRVUFSVEVSLFxuICB5ZWFyOiBZRUFSLFxuICB5ZWFyczogWUVBUlxufTtcbmZ1bmN0aW9uIHJlc29sdmVSZWxhdGl2ZVRpbWVVbml0KHNlY29uZHMpIHtcbiAgY29uc3QgYWJzVmFsdWUgPSBNYXRoLmFicyhzZWNvbmRzKTtcbiAgaWYgKGFic1ZhbHVlIDwgTUlOVVRFKSB7XG4gICAgcmV0dXJuICdzZWNvbmQnO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgSE9VUikge1xuICAgIHJldHVybiAnbWludXRlJztcbiAgfSBlbHNlIGlmIChhYnNWYWx1ZSA8IERBWSkge1xuICAgIHJldHVybiAnaG91cic7XG4gIH0gZWxzZSBpZiAoYWJzVmFsdWUgPCBXRUVLKSB7XG4gICAgcmV0dXJuICdkYXknO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgTU9OVEgpIHtcbiAgICByZXR1cm4gJ3dlZWsnO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgWUVBUikge1xuICAgIHJldHVybiAnbW9udGgnO1xuICB9XG4gIHJldHVybiAneWVhcic7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVSZWxhdGl2ZVRpbWVWYWx1ZShzZWNvbmRzLCB1bml0KSB7XG4gIC8vIFdlIGhhdmUgdG8gcm91bmQgdGhlIHJlc3VsdGluZyB2YWx1ZXMsIGFzIGBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdGBcbiAgLy8gd2lsbCBpbmNsdWRlIGZyYWN0aW9ucyBsaWtlICcyLjEgaG91cnMgYWdvJy5cbiAgcmV0dXJuIE1hdGgucm91bmQoc2Vjb25kcyAvIFVOSVRfU0VDT05EU1t1bml0XSk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIF9jYWNoZTogY2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuICAgIF9mb3JtYXR0ZXJzOiBmb3JtYXR0ZXJzID0gY3JlYXRlSW50bEZvcm1hdHRlcnMoY2FjaGUpLFxuICAgIGZvcm1hdHMsXG4gICAgbG9jYWxlLFxuICAgIG9uRXJyb3IgPSBkZWZhdWx0T25FcnJvcixcbiAgICB0aW1lWm9uZTogZ2xvYmFsVGltZVpvbmVcbiAgfSA9IHByb3BzO1xuICBmdW5jdGlvbiBhcHBseVRpbWVab25lKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnM/LnRpbWVab25lKSB7XG4gICAgICBpZiAoZ2xvYmFsVGltZVpvbmUpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIHRpbWVab25lOiBnbG9iYWxUaW1lWm9uZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25FcnJvcihuZXcgSW50bEVycm9yKEludGxFcnJvckNvZGUuRU5WSVJPTk1FTlRfRkFMTEJBQ0ssIGBUaGUgXFxgdGltZVpvbmVcXGAgcGFyYW1ldGVyIHdhc24ndCBwcm92aWRlZCBhbmQgdGhlcmUgaXMgbm8gZ2xvYmFsIGRlZmF1bHQgY29uZmlndXJlZC4gQ29uc2lkZXIgYWRkaW5nIGEgZ2xvYmFsIGRlZmF1bHQgdG8gYXZvaWQgbWFya3VwIG1pc21hdGNoZXMgY2F1c2VkIGJ5IGVudmlyb25tZW50IGRpZmZlcmVuY2VzLiBMZWFybiBtb3JlOiBodHRwczovL25leHQtaW50bC5kZXYvZG9jcy9jb25maWd1cmF0aW9uI3RpbWUtem9uZWAgKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG4gIGZ1bmN0aW9uIHJlc29sdmVGb3JtYXRPck9wdGlvbnModHlwZUZvcm1hdHMsIGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzKSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBmb3JtYXRPck9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBmb3JtYXROYW1lID0gZm9ybWF0T3JPcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHR5cGVGb3JtYXRzPy5bZm9ybWF0TmFtZV07XG4gICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgSW50bEVycm9yKEludGxFcnJvckNvZGUuTUlTU0lOR19GT1JNQVQsIGBGb3JtYXQgXFxgJHtmb3JtYXROYW1lfVxcYCBpcyBub3QgYXZhaWxhYmxlLmAgKTtcbiAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gZm9ybWF0T3JPcHRpb25zO1xuICAgIH1cbiAgICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAuLi5vdmVycmlkZXNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG4gIGZ1bmN0aW9uIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCB0eXBlRm9ybWF0cywgZm9ybWF0dGVyLCBnZXRGYWxsYmFjaykge1xuICAgIGxldCBvcHRpb25zO1xuICAgIHRyeSB7XG4gICAgICBvcHRpb25zID0gcmVzb2x2ZUZvcm1hdE9yT3B0aW9ucyh0eXBlRm9ybWF0cywgZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkVycm9yKG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5GT1JNQVRUSU5HX0VSUk9SLCBlcnJvci5tZXNzYWdlKSk7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2soKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGF0ZVRpbWUodmFsdWUsIGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCBmb3JtYXRzPy5kYXRlVGltZSwgb3B0aW9ucyA9PiB7XG4gICAgICBvcHRpb25zID0gYXBwbHlUaW1lWm9uZShvcHRpb25zKTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KHZhbHVlKTtcbiAgICB9LCAoKSA9PiBTdHJpbmcodmFsdWUpKTtcbiAgfVxuICBmdW5jdGlvbiBkYXRlVGltZVJhbmdlKHN0YXJ0LCBlbmQsIGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCBmb3JtYXRzPy5kYXRlVGltZSwgb3B0aW9ucyA9PiB7XG4gICAgICBvcHRpb25zID0gYXBwbHlUaW1lWm9uZShvcHRpb25zKTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCk7XG4gICAgfSwgKCkgPT4gW2RhdGVUaW1lKHN0YXJ0KSwgZGF0ZVRpbWUoZW5kKV0uam9pbign4oCJ4oCT4oCJJykpO1xuICB9XG4gIGZ1bmN0aW9uIG51bWJlcih2YWx1ZSwgZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMpIHtcbiAgICByZXR1cm4gZ2V0Rm9ybWF0dGVkVmFsdWUoZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMsIGZvcm1hdHM/Lm51bWJlciwgb3B0aW9ucyA9PiBmb3JtYXR0ZXJzLmdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSksICgpID0+IFN0cmluZyh2YWx1ZSkpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEdsb2JhbE5vdygpIHtcbiAgICAvLyBPbmx5IHJlYWQgd2hlbiBuZWNlc3NhcnkgdG8gYXZvaWQgdHJpZ2dlcmluZyBhIGBkeW5hbWljSU9gIGVycm9yXG4gICAgLy8gdW5uZWNlc3NhcmlseSAoYG5vd2AgaXMgb25seSBuZWVkZWQgZm9yIGBmb3JtYXQucmVsYXRpdmVUaW1lYClcbiAgICBpZiAocHJvcHMubm93KSB7XG4gICAgICByZXR1cm4gcHJvcHMubm93O1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkVycm9yKG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5FTlZJUk9OTUVOVF9GQUxMQkFDSywgYFRoZSBcXGBub3dcXGAgcGFyYW1ldGVyIHdhc24ndCBwcm92aWRlZCB0byBcXGByZWxhdGl2ZVRpbWVcXGAgYW5kIHRoZXJlIGlzIG5vIGdsb2JhbCBkZWZhdWx0IGNvbmZpZ3VyZWQsIHRoZXJlZm9yZSB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZCBhcyBhIGZhbGxiYWNrLiBTZWUgaHR0cHM6Ly9uZXh0LWludGwuZGV2L2RvY3MvdXNhZ2UvZGF0ZXMtdGltZXMjcmVsYXRpdmUtdGltZXMtdXNlbm93YCApKTtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUoZGF0ZSwgbm93T3JPcHRpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBub3dEYXRlLCB1bml0O1xuICAgICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgICAgaWYgKG5vd09yT3B0aW9ucyBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIG5vd09yT3B0aW9ucyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm93RGF0ZSA9IG5ldyBEYXRlKG5vd09yT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKG5vd09yT3B0aW9ucykge1xuICAgICAgICBpZiAobm93T3JPcHRpb25zLm5vdyAhPSBudWxsKSB7XG4gICAgICAgICAgbm93RGF0ZSA9IG5ldyBEYXRlKG5vd09yT3B0aW9ucy5ub3cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vd0RhdGUgPSBnZXRHbG9iYWxOb3coKTtcbiAgICAgICAgfVxuICAgICAgICB1bml0ID0gbm93T3JPcHRpb25zLnVuaXQ7XG4gICAgICAgIG9wdHMuc3R5bGUgPSBub3dPck9wdGlvbnMuc3R5bGU7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gVHlwZXMgYXJlIHNsaWdodGx5IG91dGRhdGVkXG4gICAgICAgIG9wdHMubnVtYmVyaW5nU3lzdGVtID0gbm93T3JPcHRpb25zLm51bWJlcmluZ1N5c3RlbTtcbiAgICAgIH1cbiAgICAgIGlmICghbm93RGF0ZSkge1xuICAgICAgICBub3dEYXRlID0gZ2V0R2xvYmFsTm93KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRlRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgY29uc3Qgc2Vjb25kcyA9IChkYXRlRGF0ZS5nZXRUaW1lKCkgLSBub3dEYXRlLmdldFRpbWUoKSkgLyAxMDAwO1xuICAgICAgaWYgKCF1bml0KSB7XG4gICAgICAgIHVuaXQgPSByZXNvbHZlUmVsYXRpdmVUaW1lVW5pdChzZWNvbmRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gYG51bWVyaWM6ICdhdXRvJ2AgY2FuIHRoZW9yZXRpY2FsbHkgcHJvZHVjZSBvdXRwdXQgbGlrZSBcInllc3RlcmRheVwiLFxuICAgICAgLy8gYnV0IGl0IG9ubHkgd29ya3Mgd2l0aCBpbnRlZ2Vycy4gRS5nLiAtMSBkYXkgd2lsbCBwcm9kdWNlIFwieWVzdGVyZGF5XCIsXG4gICAgICAvLyBidXQgLTEuMSBkYXlzIHdpbGwgcHJvZHVjZSBcIi0xLjEgZGF5c1wiLiBSb3VuZGluZyBiZWZvcmUgZm9ybWF0dGluZyBpc1xuICAgICAgLy8gbm90IGRlc2lyZWQsIGFzIHRoZSBnaXZlbiBkYXRlcyBtaWdodCBjcm9zcyBhIHRocmVzaG9sZCB3ZXJlIHRoZVxuICAgICAgLy8gb3V0cHV0IGlzbid0IGNvcnJlY3QgYW55bW9yZS4gRXhhbXBsZTogMjAyNC0wMS0wOFQyMzowMDowMC4wMDBaIGFuZFxuICAgICAgLy8gMjAyNC0wMS0wOFQwMTowMDowMC4wMDBaIHdvdWxkIHByb2R1Y2UgXCJ5ZXN0ZXJkYXlcIiwgd2hpY2ggaXMgbm90IHRoZVxuICAgICAgLy8gY2FzZS4gQnkgdXNpbmcgYGFsd2F5c2Agd2UgY2FuIGVuc3VyZSBjb3JyZWN0IG91dHB1dC4gVGhlIG9ubHkgZXhjZXB0aW9uXG4gICAgICAvLyBpcyB0aGUgZm9ybWF0dGluZyBvZiB0aW1lcyA8MSBzZWNvbmQgYXMgXCJub3dcIi5cbiAgICAgIG9wdHMubnVtZXJpYyA9IHVuaXQgPT09ICdzZWNvbmQnID8gJ2F1dG8nIDogJ2Fsd2F5cyc7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNhbGN1bGF0ZVJlbGF0aXZlVGltZVZhbHVlKHNlY29uZHMsIHVuaXQpO1xuICAgICAgcmV0dXJuIGZvcm1hdHRlcnMuZ2V0UmVsYXRpdmVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0cykuZm9ybWF0KHZhbHVlLCB1bml0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25FcnJvcihuZXcgSW50bEVycm9yKEludGxFcnJvckNvZGUuRk9STUFUVElOR19FUlJPUiwgZXJyb3IubWVzc2FnZSkpO1xuICAgICAgcmV0dXJuIFN0cmluZyhkYXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbGlzdCh2YWx1ZSwgZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMpIHtcbiAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSBbXTtcbiAgICBjb25zdCByaWNoVmFsdWVzID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gYGZvcm1hdFRvUGFydHNgIG9ubHkgYWNjZXB0cyBzdHJpbmdzLCB0aGVyZWZvcmUgd2UgaGF2ZSB0byB0ZW1wb3JhcmlseVxuICAgIC8vIHJlcGxhY2UgUmVhY3QgZWxlbWVudHMgd2l0aCBhIHBsYWNlaG9sZGVyIElEIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmV0cmlldmVcbiAgICAvLyB0aGUgb3JpZ2luYWwgdmFsdWUgYWZ0ZXJ3YXJkcy5cbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgbGV0IHNlcmlhbGl6ZWRJdGVtO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICBzZXJpYWxpemVkSXRlbSA9IFN0cmluZyhpbmRleCk7XG4gICAgICAgIHJpY2hWYWx1ZXMuc2V0KHNlcmlhbGl6ZWRJdGVtLCBpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcmlhbGl6ZWRJdGVtID0gU3RyaW5nKGl0ZW0pO1xuICAgICAgfVxuICAgICAgc2VyaWFsaXplZFZhbHVlLnB1c2goc2VyaWFsaXplZEl0ZW0pO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCBmb3JtYXRzPy5saXN0LFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gYHJpY2hWYWx1ZXMuc2l6ZWAgaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHJldHVybiB0eXBlLCBidXQgVHlwZVNjcmlwdCBjYW4ndCBpbmZlciB0aGUgbWVhbmluZyBvZiB0aGlzIGNvcnJlY3RseVxuICAgIG9wdGlvbnMgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVycy5nZXRMaXN0Rm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0VG9QYXJ0cyhzZXJpYWxpemVkVmFsdWUpLm1hcChwYXJ0ID0+IHBhcnQudHlwZSA9PT0gJ2xpdGVyYWwnID8gcGFydC52YWx1ZSA6IHJpY2hWYWx1ZXMuZ2V0KHBhcnQudmFsdWUpIHx8IHBhcnQudmFsdWUpO1xuICAgICAgaWYgKHJpY2hWYWx1ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgICB9XG4gICAgfSwgKCkgPT4gU3RyaW5nKHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXRlVGltZSxcbiAgICBudW1iZXIsXG4gICAgcmVsYXRpdmVUaW1lLFxuICAgIGxpc3QsXG4gICAgZGF0ZVRpbWVSYW5nZVxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1lc3NhZ2VzU2VnbWVudChtZXNzYWdlcywgaW52YWxpZEtleUxhYmVscywgcGFyZW50UGF0aCkge1xuICBPYmplY3QuZW50cmllcyhtZXNzYWdlcykuZm9yRWFjaCgoW2tleSwgbWVzc2FnZU9yTWVzc2FnZXNdKSA9PiB7XG4gICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICBsZXQga2V5TGFiZWwgPSBrZXk7XG4gICAgICBpZiAocGFyZW50UGF0aCkga2V5TGFiZWwgKz0gYCAoYXQgJHtwYXJlbnRQYXRofSlgO1xuICAgICAgaW52YWxpZEtleUxhYmVscy5wdXNoKGtleUxhYmVsKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgIGlmIChtZXNzYWdlT3JNZXNzYWdlcyAhPSBudWxsICYmIHR5cGVvZiBtZXNzYWdlT3JNZXNzYWdlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkYXRlTWVzc2FnZXNTZWdtZW50KG1lc3NhZ2VPck1lc3NhZ2VzLCBpbnZhbGlkS2V5TGFiZWxzLCBqb2luUGF0aChwYXJlbnRQYXRoLCBrZXkpKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNZXNzYWdlcyhtZXNzYWdlcywgb25FcnJvcikge1xuICBjb25zdCBpbnZhbGlkS2V5TGFiZWxzID0gW107XG4gIHZhbGlkYXRlTWVzc2FnZXNTZWdtZW50KG1lc3NhZ2VzLCBpbnZhbGlkS2V5TGFiZWxzKTtcbiAgaWYgKGludmFsaWRLZXlMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgIG9uRXJyb3IobmV3IEludGxFcnJvcihJbnRsRXJyb3JDb2RlLklOVkFMSURfS0VZLCBgTmFtZXNwYWNlIGtleXMgY2FuIG5vdCBjb250YWluIHRoZSBjaGFyYWN0ZXIgXCIuXCIgYXMgdGhpcyBpcyB1c2VkIHRvIGV4cHJlc3MgbmVzdGluZy4gUGxlYXNlIHJlbW92ZSBpdCBvciByZXBsYWNlIGl0IHdpdGggYW5vdGhlciBjaGFyYWN0ZXIuXG5cbkludmFsaWQgJHtpbnZhbGlkS2V5TGFiZWxzLmxlbmd0aCA9PT0gMSA/ICdrZXknIDogJ2tleXMnfTogJHtpbnZhbGlkS2V5TGFiZWxzLmpvaW4oJywgJyl9XG5cbklmIHlvdSdyZSBtaWdyYXRpbmcgZnJvbSBhIGZsYXQgc3RydWN0dXJlLCB5b3UgY2FuIGNvbnZlcnQgeW91ciBtZXNzYWdlcyBhcyBmb2xsb3dzOlxuXG5pbXBvcnQge3NldH0gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBpbnB1dCA9IHtcbiAgXCJvbmUub25lXCI6IFwiMS4xXCIsXG4gIFwib25lLnR3b1wiOiBcIjEuMlwiLFxuICBcInR3by5vbmUub25lXCI6IFwiMi4xLjFcIlxufTtcblxuY29uc3Qgb3V0cHV0ID0gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZShcbiAgKGFjYywgW2tleSwgdmFsdWVdKSA9PiBzZXQoYWNjLCBrZXksIHZhbHVlKSxcbiAge31cbik7XG5cbi8vIE91dHB1dDpcbi8vXG4vLyB7XG4vLyAgIFwib25lXCI6IHtcbi8vICAgICBcIm9uZVwiOiBcIjEuMVwiLFxuLy8gICAgIFwidHdvXCI6IFwiMS4yXCJcbi8vICAgfSxcbi8vICAgXCJ0d29cIjoge1xuLy8gICAgIFwib25lXCI6IHtcbi8vICAgICAgIFwib25lXCI6IFwiMi4xLjFcIlxuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuYCApKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuaGFuY2VzIHRoZSBpbmNvbWluZyBwcm9wcyB3aXRoIGRlZmF1bHRzLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplQ29uZmlnKHtcbiAgZm9ybWF0cyxcbiAgZ2V0TWVzc2FnZUZhbGxiYWNrLFxuICBtZXNzYWdlcyxcbiAgb25FcnJvcixcbiAgLi4ucmVzdFxufSkge1xuICBjb25zdCBmaW5hbE9uRXJyb3IgPSBvbkVycm9yIHx8IGRlZmF1bHRPbkVycm9yO1xuICBjb25zdCBmaW5hbEdldE1lc3NhZ2VGYWxsYmFjayA9IGdldE1lc3NhZ2VGYWxsYmFjayB8fCBkZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrO1xuICB7XG4gICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzKG1lc3NhZ2VzLCBmaW5hbE9uRXJyb3IpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLnJlc3QsXG4gICAgZm9ybWF0czogZm9ybWF0cyB8fCB1bmRlZmluZWQsXG4gICAgbWVzc2FnZXM6IG1lc3NhZ2VzIHx8IHVuZGVmaW5lZCxcbiAgICBvbkVycm9yOiBmaW5hbE9uRXJyb3IsXG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrOiBmaW5hbEdldE1lc3NhZ2VGYWxsYmFja1xuICB9O1xufVxuXG5leHBvcnQgeyBJbnRsRXJyb3IgYXMgSSwgSW50bEVycm9yQ29kZSBhcyBhLCBjcmVhdGVJbnRsRm9ybWF0dGVycyBhcyBiLCBjcmVhdGVGb3JtYXR0ZXIgYXMgYywgY3JlYXRlQ2FjaGUgYXMgZCwgY3JlYXRlQmFzZVRyYW5zbGF0b3IgYXMgZSwgZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayBhcyBmLCBkZWZhdWx0T25FcnJvciBhcyBnLCBpbml0aWFsaXplQ29uZmlnIGFzIGksIHJlc29sdmVOYW1lc3BhY2UgYXMgciB9O1xuIl0sIm5hbWVzIjpbIkludGxNZXNzYWdlRm9ybWF0IiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJtZW1vaXplIiwic3RyYXRlZ2llcyIsIkludGxFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJjb2RlIiwib3JpZ2luYWxNZXNzYWdlIiwibWVzc2FnZSIsIkludGxFcnJvckNvZGUiLCJjb252ZXJ0Rm9ybWF0c1RvSW50bE1lc3NhZ2VGb3JtYXQiLCJnbG9iYWxGb3JtYXRzIiwiaW5saW5lRm9ybWF0cyIsInRpbWVab25lIiwibWZEYXRlRGVmYXVsdHMiLCJmb3JtYXRzIiwiZGF0ZSIsIm1mVGltZURlZmF1bHRzIiwidGltZSIsImRhdGVUaW1lRm9ybWF0cyIsImRhdGVUaW1lIiwiYWxsRm9ybWF0cyIsIm51bWJlciIsImZvckVhY2giLCJwcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImpvaW5QYXRoIiwicGFydHMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2siLCJwcm9wcyIsIm5hbWVzcGFjZSIsImRlZmF1bHRPbkVycm9yIiwiZXJyb3IiLCJjb25zb2xlIiwiY3JlYXRlQ2FjaGUiLCJyZWxhdGl2ZVRpbWUiLCJwbHVyYWxSdWxlcyIsImxpc3QiLCJkaXNwbGF5TmFtZXMiLCJjcmVhdGVNZW1vQ2FjaGUiLCJzdG9yZSIsImNyZWF0ZSIsImdldCIsInNldCIsIm1lbW9GbiIsImZuIiwiY2FjaGUiLCJzdHJhdGVneSIsInZhcmlhZGljIiwibWVtb0NvbnN0cnVjdG9yIiwiQ29uc3RydWN0b3JGbiIsImFyZ3MiLCJjcmVhdGVJbnRsRm9ybWF0dGVycyIsImdldERhdGVUaW1lRm9ybWF0IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiTnVtYmVyRm9ybWF0IiwiZ2V0UGx1cmFsUnVsZXMiLCJQbHVyYWxSdWxlcyIsImdldFJlbGF0aXZlVGltZUZvcm1hdCIsIlJlbGF0aXZlVGltZUZvcm1hdCIsImdldExpc3RGb3JtYXQiLCJMaXN0Rm9ybWF0IiwiZ2V0RGlzcGxheU5hbWVzIiwiRGlzcGxheU5hbWVzIiwiY3JlYXRlTWVzc2FnZUZvcm1hdHRlciIsImludGxGb3JtYXR0ZXJzIiwiZ2V0TWVzc2FnZUZvcm1hdCIsImZvcm1hdHRlcnMiLCJyZXNvbHZlUGF0aCIsImxvY2FsZSIsIm1lc3NhZ2VzIiwiZnVsbEtleSIsInNwbGl0IiwicGFydCIsIm5leHQiLCJwcmVwYXJlVHJhbnNsYXRpb25WYWx1ZXMiLCJ2YWx1ZXMiLCJ0cmFuc2Zvcm1lZFZhbHVlcyIsImtleXMiLCJpbmRleCIsInRyYW5zZm9ybWVkIiwiY2h1bmtzIiwicmVzdWx0IiwiZ2V0TWVzc2FnZXNPckVycm9yIiwib25FcnJvciIsInJldHJpZXZlZE1lc3NhZ2VzIiwiaW50bEVycm9yIiwiTUlTU0lOR19NRVNTQUdFIiwiZ2V0UGxhaW5NZXNzYWdlIiwiY2FuZGlkYXRlIiwidGVzdCIsInVuZGVmaW5lZCIsImNyZWF0ZUJhc2VUcmFuc2xhdG9yIiwiY29uZmlnIiwibWVzc2FnZXNPckVycm9yIiwiY3JlYXRlQmFzZVRyYW5zbGF0b3JJbXBsIiwiZ2V0TWVzc2FnZUZhbGxiYWNrIiwiaGFzTWVzc2FnZXNFcnJvciIsImdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5IiwidHJhbnNsYXRlQmFzZUZuIiwiZXJyb3JNZXNzYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwiSU5WQUxJRF9NRVNTQUdFIiwiSU5TVUZGSUNJRU5UX1BBVEgiLCJtZXNzYWdlRm9ybWF0IiwicGxhaW5NZXNzYWdlIiwibG9jYWxlcyIsIm9wdGlvbnMiLCJ0aHJvd25FcnJvciIsImZvcm1hdHRlZE1lc3NhZ2UiLCJmb3JtYXQiLCJTdHJpbmciLCJGT1JNQVRUSU5HX0VSUk9SIiwidHJhbnNsYXRlRm4iLCJyaWNoIiwibWFya3VwIiwicmF3IiwiaGFzIiwicmVzb2x2ZU5hbWVzcGFjZSIsIm5hbWVzcGFjZVByZWZpeCIsInNsaWNlIiwibGVuZ3RoIiwiU0VDT05EIiwiTUlOVVRFIiwiSE9VUiIsIkRBWSIsIldFRUsiLCJNT05USCIsIlFVQVJURVIiLCJZRUFSIiwiVU5JVF9TRUNPTkRTIiwic2Vjb25kIiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwiaG91cnMiLCJkYXkiLCJkYXlzIiwid2VlayIsIndlZWtzIiwibW9udGgiLCJtb250aHMiLCJxdWFydGVyIiwicXVhcnRlcnMiLCJ5ZWFyIiwieWVhcnMiLCJyZXNvbHZlUmVsYXRpdmVUaW1lVW5pdCIsImFic1ZhbHVlIiwiTWF0aCIsImFicyIsImNhbGN1bGF0ZVJlbGF0aXZlVGltZVZhbHVlIiwidW5pdCIsInJvdW5kIiwiY3JlYXRlRm9ybWF0dGVyIiwiX2NhY2hlIiwiX2Zvcm1hdHRlcnMiLCJnbG9iYWxUaW1lWm9uZSIsImFwcGx5VGltZVpvbmUiLCJFTlZJUk9OTUVOVF9GQUxMQkFDSyIsInJlc29sdmVGb3JtYXRPck9wdGlvbnMiLCJ0eXBlRm9ybWF0cyIsImZvcm1hdE9yT3B0aW9ucyIsIm92ZXJyaWRlcyIsImZvcm1hdE5hbWUiLCJNSVNTSU5HX0ZPUk1BVCIsImdldEZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0dGVyIiwiZ2V0RmFsbGJhY2siLCJkYXRlVGltZVJhbmdlIiwic3RhcnQiLCJlbmQiLCJmb3JtYXRSYW5nZSIsImdldEdsb2JhbE5vdyIsIm5vdyIsIkRhdGUiLCJub3dPck9wdGlvbnMiLCJub3dEYXRlIiwib3B0cyIsInN0eWxlIiwibnVtYmVyaW5nU3lzdGVtIiwiZGF0ZURhdGUiLCJnZXRUaW1lIiwibnVtZXJpYyIsInNlcmlhbGl6ZWRWYWx1ZSIsInJpY2hWYWx1ZXMiLCJNYXAiLCJpdGVtIiwic2VyaWFsaXplZEl0ZW0iLCJwdXNoIiwiZm9ybWF0VG9QYXJ0cyIsIm1hcCIsInR5cGUiLCJzaXplIiwidmFsaWRhdGVNZXNzYWdlc1NlZ21lbnQiLCJpbnZhbGlkS2V5TGFiZWxzIiwicGFyZW50UGF0aCIsIm1lc3NhZ2VPck1lc3NhZ2VzIiwiaW5jbHVkZXMiLCJrZXlMYWJlbCIsInZhbGlkYXRlTWVzc2FnZXMiLCJJTlZBTElEX0tFWSIsImluaXRpYWxpemVDb25maWciLCJyZXN0IiwiZmluYWxPbkVycm9yIiwiZmluYWxHZXRNZXNzYWdlRmFsbGJhY2siLCJJIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImkiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/esm/development/react.js":
/*!*************************************************************!*\
  !*** ./node_modules/use-intl/dist/esm/development/react.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlProvider: () => (/* binding */ IntlProvider),\n/* harmony export */   useFormatter: () => (/* binding */ useFormatter),\n/* harmony export */   useLocale: () => (/* binding */ useLocale),\n/* harmony export */   useMessages: () => (/* binding */ useMessages),\n/* harmony export */   useNow: () => (/* binding */ useNow),\n/* harmony export */   useTimeZone: () => (/* binding */ useTimeZone),\n/* harmony export */   useTranslations: () => (/* binding */ useTranslations)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./initializeConfig-DPFnvsUO.js */ \"(ssr)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\n\n\nconst IntlContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nfunction IntlProvider({ children, formats, getMessageFallback, locale, messages, now, onError, timeZone }) {\n    const prevContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(IntlContext);\n    // The formatter cache is released when the locale changes. For\n    // long-running apps with a persistent `IntlProvider` at the root,\n    // this can reduce the memory footprint (e.g. in React Native).\n    const cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return prevContext?.cache || (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.d)();\n    }, [\n        locale,\n        prevContext?.cache\n    ]);\n    const formatters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>prevContext?.formatters || (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.b)(cache), [\n        cache,\n        prevContext?.formatters\n    ]);\n    // Memoizing this value helps to avoid triggering a re-render of all\n    // context consumers in case the configuration didn't change. However,\n    // if some of the non-primitive values change, a re-render will still\n    // be triggered. Note that there's no need to put `memo` on `IntlProvider`\n    // itself, because the `children` typically change on every render.\n    // There's some burden on the consumer side if it's important to reduce\n    // re-renders, put that's how React works.\n    // See: https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#context-updates-and-render-optimizations\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...(0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.i)({\n                locale,\n                // (required by provider)\n                formats: formats === undefined ? prevContext?.formats : formats,\n                getMessageFallback: getMessageFallback || prevContext?.getMessageFallback,\n                messages: messages === undefined ? prevContext?.messages : messages,\n                now: now || prevContext?.now,\n                onError: onError || prevContext?.onError,\n                timeZone: timeZone || prevContext?.timeZone\n            }),\n            formatters,\n            cache\n        }), [\n        cache,\n        formats,\n        formatters,\n        getMessageFallback,\n        locale,\n        messages,\n        now,\n        onError,\n        prevContext,\n        timeZone\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IntlContext.Provider, {\n        value: value,\n        children: children\n    });\n}\nfunction useIntlContext() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(IntlContext);\n    if (!context) {\n        throw new Error(\"No intl context found. Have you configured the provider? See https://next-intl.dev/docs/usage/configuration#server-client-components\");\n    }\n    return context;\n}\nlet hasWarnedForMissingTimezone = false;\nconst isServer = \"undefined\" === \"undefined\";\nfunction useTranslationsImpl(allMessagesPrefixed, namespacePrefixed, namespacePrefix) {\n    const { cache, formats: globalFormats, formatters, getMessageFallback, locale, onError, timeZone } = useIntlContext();\n    // The `namespacePrefix` is part of the type system.\n    // See the comment in the hook invocation.\n    const allMessages = allMessagesPrefixed[namespacePrefix];\n    const namespace = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.r)(namespacePrefixed, namespacePrefix);\n    if (!timeZone && !hasWarnedForMissingTimezone && isServer) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        hasWarnedForMissingTimezone = true;\n        onError(new _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.I(_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.a.ENVIRONMENT_FALLBACK, `There is no \\`timeZone\\` configured, this can lead to markup mismatches caused by environment differences. Consider adding a global default: https://next-intl.dev/docs/configuration#time-zone`));\n    }\n    const translate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.e)({\n            cache,\n            formatters,\n            getMessageFallback,\n            messages: allMessages,\n            namespace,\n            onError,\n            formats: globalFormats,\n            locale,\n            timeZone\n        }), [\n        cache,\n        formatters,\n        getMessageFallback,\n        allMessages,\n        namespace,\n        onError,\n        globalFormats,\n        locale,\n        timeZone\n    ]);\n    return translate;\n}\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */ function useTranslations(namespace) {\n    const context = useIntlContext();\n    const messages = context.messages;\n    // We have to wrap the actual hook so the type inference for the optional\n    // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n    // The prefix (\"!\") is arbitrary.\n    // @ts-expect-error Use the explicit annotation instead\n    return useTranslationsImpl({\n        \"!\": messages\n    }, // @ts-expect-error\n    namespace ? `!.${namespace}` : \"!\", \"!\");\n}\nfunction useLocale() {\n    return useIntlContext().locale;\n}\nfunction getNow() {\n    return new Date();\n}\n/**\n * @see https://next-intl.dev/docs/usage/dates-times#relative-times-usenow\n */ function useNow(options) {\n    const updateInterval = options?.updateInterval;\n    const { now: globalNow } = useIntlContext();\n    const [now, setNow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(globalNow || getNow());\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!updateInterval) return;\n        const intervalId = setInterval(()=>{\n            setNow(getNow());\n        }, updateInterval);\n        return ()=>{\n            clearInterval(intervalId);\n        };\n    }, [\n        globalNow,\n        updateInterval\n    ]);\n    return updateInterval == null && globalNow ? globalNow : now;\n}\nfunction useTimeZone() {\n    return useIntlContext().timeZone;\n}\nfunction useMessages() {\n    const context = useIntlContext();\n    if (!context.messages) {\n        throw new Error(\"No messages found. Have you configured them correctly? See https://next-intl.dev/docs/configuration#messages\");\n    }\n    return context.messages;\n}\nfunction useFormatter() {\n    const { formats, formatters, locale, now: globalNow, onError, timeZone } = useIntlContext();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_2__.c)({\n            formats,\n            locale,\n            now: globalNow,\n            onError,\n            timeZone,\n            _formatters: formatters\n        }), [\n        formats,\n        formatters,\n        globalNow,\n        locale,\n        onError,\n        timeZone\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/esm/development/react.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/use-intl/dist/esm/development/core.js":
/*!************************************************************!*\
  !*** ./node_modules/use-intl/dist/esm/development/core.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlError: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   IntlErrorCode: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   _createCache: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   _createIntlFormatters: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createFormatter: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createTranslator: () => (/* binding */ createTranslator),\n/* harmony export */   hasLocale: () => (/* binding */ hasLocale),\n/* harmony export */   initializeConfig: () => (/* reexport safe */ _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.i)\n/* harmony export */ });\n/* harmony import */ var _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initializeConfig-DPFnvsUO.js */ \"(rsc)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js\");\n\n\nfunction createTranslatorImpl({ messages, namespace, ...rest }, namespacePrefix) {\n    // The `namespacePrefix` is part of the type system.\n    // See the comment in the function invocation.\n    messages = messages[namespacePrefix];\n    namespace = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.r)(namespace, namespacePrefix);\n    return (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.e)({\n        ...rest,\n        messages,\n        namespace\n    });\n}\n// This type is slightly more loose than `AbstractIntlMessages`\n// in order to avoid a type error.\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */ function createTranslator({ _cache = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.d)(), _formatters = (0,_initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.b)(_cache), getMessageFallback = _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.f, messages, namespace, onError = _initializeConfig_DPFnvsUO_js__WEBPACK_IMPORTED_MODULE_0__.g, ...rest }) {\n    // We have to wrap the actual function so the type inference for the optional\n    // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n    // The prefix (\"!\") is arbitrary.\n    // @ts-expect-error Use the explicit annotation instead\n    return createTranslatorImpl({\n        ...rest,\n        onError,\n        cache: _cache,\n        formatters: _formatters,\n        getMessageFallback,\n        // @ts-expect-error `messages` is allowed to be `undefined` here and will be handled internally\n        messages: {\n            \"!\": messages\n        },\n        namespace: namespace ? `!.${namespace}` : \"!\"\n    }, \"!\");\n}\n/**\n * Checks if a locale exists in a list of locales.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale\n */ function hasLocale(locales, candidate) {\n    return locales.includes(candidate);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9lc20vZGV2ZWxvcG1lbnQvY29yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb007QUFDbkU7QUFLakksU0FBU29CLHFCQUFxQixFQUM1QkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1QsR0FBR0MsTUFDSixFQUFFQyxlQUFlO0lBQ2hCLG9EQUFvRDtJQUNwRCw4Q0FBOEM7SUFDOUNILFdBQVdBLFFBQVEsQ0FBQ0csZ0JBQWdCO0lBQ3BDRixZQUFZckIsZ0VBQWdCQSxDQUFDcUIsV0FBV0U7SUFDeEMsT0FBT3JCLGdFQUFvQkEsQ0FBQztRQUMxQixHQUFHb0IsSUFBSTtRQUNQRjtRQUNBQztJQUNGO0FBQ0Y7QUFFQSwrREFBK0Q7QUFDL0Qsa0NBQWtDO0FBRWxDOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRyxpQkFBaUIsRUFDeEJDLFNBQVNqQixnRUFBV0EsRUFBRSxFQUN0QmtCLGNBQWNwQixnRUFBb0JBLENBQUNtQixPQUFPLEVBQzFDRSxxQkFBcUJ2Qiw0REFBeUIsRUFDOUNnQixRQUFRLEVBQ1JDLFNBQVMsRUFDVE8sVUFBVWxCLDREQUFjLEVBQ3hCLEdBQUdZLE1BQ0o7SUFDQyw2RUFBNkU7SUFDN0UsNkVBQTZFO0lBQzdFLGlDQUFpQztJQUNqQyx1REFBdUQ7SUFDdkQsT0FBT0gscUJBQXFCO1FBQzFCLEdBQUdHLElBQUk7UUFDUE07UUFDQUMsT0FBT0o7UUFDUEssWUFBWUo7UUFDWkM7UUFDQSwrRkFBK0Y7UUFDL0ZQLFVBQVU7WUFDUixLQUFLQTtRQUNQO1FBQ0FDLFdBQVdBLFlBQVksQ0FBQyxFQUFFLEVBQUVBLFVBQVUsQ0FBQyxHQUFHO0lBQzVDLEdBQUc7QUFDTDtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTVSxVQUFVQyxPQUFPLEVBQUVDLFNBQVM7SUFDbkMsT0FBT0QsUUFBUUUsUUFBUSxDQUFDRDtBQUMxQjtBQUVtSCIsInNvdXJjZXMiOlsid2VicGFjazovL2Nhci1pbXBvcnQtbGFuZGluZy8uL25vZGVfbW9kdWxlcy91c2UtaW50bC9kaXN0L2VzbS9kZXZlbG9wbWVudC9jb3JlLmpzPzU5MTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgciBhcyByZXNvbHZlTmFtZXNwYWNlLCBlIGFzIGNyZWF0ZUJhc2VUcmFuc2xhdG9yLCBmIGFzIGRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2ssIGIgYXMgY3JlYXRlSW50bEZvcm1hdHRlcnMsIGQgYXMgY3JlYXRlQ2FjaGUsIGcgYXMgZGVmYXVsdE9uRXJyb3IgfSBmcm9tICcuL2luaXRpYWxpemVDb25maWctRFBGbnZzVU8uanMnO1xuZXhwb3J0IHsgSSBhcyBJbnRsRXJyb3IsIGEgYXMgSW50bEVycm9yQ29kZSwgYyBhcyBjcmVhdGVGb3JtYXR0ZXIsIGkgYXMgaW5pdGlhbGl6ZUNvbmZpZyB9IGZyb20gJy4vaW5pdGlhbGl6ZUNvbmZpZy1EUEZudnNVTy5qcyc7XG5cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zbGF0b3JJbXBsKHtcbiAgbWVzc2FnZXMsXG4gIG5hbWVzcGFjZSxcbiAgLi4ucmVzdFxufSwgbmFtZXNwYWNlUHJlZml4KSB7XG4gIC8vIFRoZSBgbmFtZXNwYWNlUHJlZml4YCBpcyBwYXJ0IG9mIHRoZSB0eXBlIHN5c3RlbS5cbiAgLy8gU2VlIHRoZSBjb21tZW50IGluIHRoZSBmdW5jdGlvbiBpbnZvY2F0aW9uLlxuICBtZXNzYWdlcyA9IG1lc3NhZ2VzW25hbWVzcGFjZVByZWZpeF07XG4gIG5hbWVzcGFjZSA9IHJlc29sdmVOYW1lc3BhY2UobmFtZXNwYWNlLCBuYW1lc3BhY2VQcmVmaXgpO1xuICByZXR1cm4gY3JlYXRlQmFzZVRyYW5zbGF0b3Ioe1xuICAgIC4uLnJlc3QsXG4gICAgbWVzc2FnZXMsXG4gICAgbmFtZXNwYWNlXG4gIH0pO1xufVxuXG4vLyBUaGlzIHR5cGUgaXMgc2xpZ2h0bHkgbW9yZSBsb29zZSB0aGFuIGBBYnN0cmFjdEludGxNZXNzYWdlc2Bcbi8vIGluIG9yZGVyIHRvIGF2b2lkIGEgdHlwZSBlcnJvci5cblxuLyoqXG4gKiBUcmFuc2xhdGVzIG1lc3NhZ2VzIGZyb20gdGhlIGdpdmVuIG5hbWVzcGFjZSBieSB1c2luZyB0aGUgSUNVIHN5bnRheC5cbiAqIFNlZSBodHRwczovL2Zvcm1hdGpzLmlvL2RvY3MvY29yZS1jb25jZXB0cy9pY3Utc3ludGF4LlxuICpcbiAqIElmIG5vIG5hbWVzcGFjZSBpcyBwcm92aWRlZCwgYWxsIGF2YWlsYWJsZSBtZXNzYWdlcyBhcmUgcmV0dXJuZWQuXG4gKiBUaGUgbmFtZXNwYWNlIGNhbiBhbHNvIGluZGljYXRlIG5lc3RpbmcgYnkgdXNpbmcgYSBkb3RcbiAqIChlLmcuIGBuYW1lc3BhY2UuQ29tcG9uZW50YCkuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zbGF0b3Ioe1xuICBfY2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuICBfZm9ybWF0dGVycyA9IGNyZWF0ZUludGxGb3JtYXR0ZXJzKF9jYWNoZSksXG4gIGdldE1lc3NhZ2VGYWxsYmFjayA9IGRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2ssXG4gIG1lc3NhZ2VzLFxuICBuYW1lc3BhY2UsXG4gIG9uRXJyb3IgPSBkZWZhdWx0T25FcnJvcixcbiAgLi4ucmVzdFxufSkge1xuICAvLyBXZSBoYXZlIHRvIHdyYXAgdGhlIGFjdHVhbCBmdW5jdGlvbiBzbyB0aGUgdHlwZSBpbmZlcmVuY2UgZm9yIHRoZSBvcHRpb25hbFxuICAvLyBuYW1lc3BhY2Ugd29ya3MgY29ycmVjdGx5LiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzcxNTI5NTc1LzM0MzA0NVxuICAvLyBUaGUgcHJlZml4IChcIiFcIikgaXMgYXJiaXRyYXJ5LlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIFVzZSB0aGUgZXhwbGljaXQgYW5ub3RhdGlvbiBpbnN0ZWFkXG4gIHJldHVybiBjcmVhdGVUcmFuc2xhdG9ySW1wbCh7XG4gICAgLi4ucmVzdCxcbiAgICBvbkVycm9yLFxuICAgIGNhY2hlOiBfY2FjaGUsXG4gICAgZm9ybWF0dGVyczogX2Zvcm1hdHRlcnMsXG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrLFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYG1lc3NhZ2VzYCBpcyBhbGxvd2VkIHRvIGJlIGB1bmRlZmluZWRgIGhlcmUgYW5kIHdpbGwgYmUgaGFuZGxlZCBpbnRlcm5hbGx5XG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICchJzogbWVzc2FnZXNcbiAgICB9LFxuICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlID8gYCEuJHtuYW1lc3BhY2V9YCA6ICchJ1xuICB9LCAnIScpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxvY2FsZSBleGlzdHMgaW4gYSBsaXN0IG9mIGxvY2FsZXMuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0xvY2FsZVxuICovXG5mdW5jdGlvbiBoYXNMb2NhbGUobG9jYWxlcywgY2FuZGlkYXRlKSB7XG4gIHJldHVybiBsb2NhbGVzLmluY2x1ZGVzKGNhbmRpZGF0ZSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNhY2hlIGFzIF9jcmVhdGVDYWNoZSwgY3JlYXRlSW50bEZvcm1hdHRlcnMgYXMgX2NyZWF0ZUludGxGb3JtYXR0ZXJzLCBjcmVhdGVUcmFuc2xhdG9yLCBoYXNMb2NhbGUgfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVzb2x2ZU5hbWVzcGFjZSIsImUiLCJjcmVhdGVCYXNlVHJhbnNsYXRvciIsImYiLCJkZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrIiwiYiIsImNyZWF0ZUludGxGb3JtYXR0ZXJzIiwiZCIsImNyZWF0ZUNhY2hlIiwiZyIsImRlZmF1bHRPbkVycm9yIiwiSSIsIkludGxFcnJvciIsImEiLCJJbnRsRXJyb3JDb2RlIiwiYyIsImNyZWF0ZUZvcm1hdHRlciIsImkiLCJpbml0aWFsaXplQ29uZmlnIiwiY3JlYXRlVHJhbnNsYXRvckltcGwiLCJtZXNzYWdlcyIsIm5hbWVzcGFjZSIsInJlc3QiLCJuYW1lc3BhY2VQcmVmaXgiLCJjcmVhdGVUcmFuc2xhdG9yIiwiX2NhY2hlIiwiX2Zvcm1hdHRlcnMiLCJnZXRNZXNzYWdlRmFsbGJhY2siLCJvbkVycm9yIiwiY2FjaGUiLCJmb3JtYXR0ZXJzIiwiaGFzTG9jYWxlIiwibG9jYWxlcyIsImNhbmRpZGF0ZSIsImluY2x1ZGVzIiwiX2NyZWF0ZUNhY2hlIiwiX2NyZWF0ZUludGxGb3JtYXR0ZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/use-intl/dist/esm/development/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   I: () => (/* binding */ IntlError),\n/* harmony export */   a: () => (/* binding */ IntlErrorCode),\n/* harmony export */   b: () => (/* binding */ createIntlFormatters),\n/* harmony export */   c: () => (/* binding */ createFormatter),\n/* harmony export */   d: () => (/* binding */ createCache),\n/* harmony export */   e: () => (/* binding */ createBaseTranslator),\n/* harmony export */   f: () => (/* binding */ defaultGetMessageFallback),\n/* harmony export */   g: () => (/* binding */ defaultOnError),\n/* harmony export */   i: () => (/* binding */ initializeConfig),\n/* harmony export */   r: () => (/* binding */ resolveNamespace)\n/* harmony export */ });\n/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intl-messageformat */ \"(rsc)/./node_modules/intl-messageformat/lib/src/core.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js\");\n\n\n\nclass IntlError extends Error {\n    constructor(code, originalMessage){\n        let message = code;\n        if (originalMessage) {\n            message += \": \" + originalMessage;\n        }\n        super(message);\n        this.code = code;\n        if (originalMessage) {\n            this.originalMessage = originalMessage;\n        }\n    }\n}\nvar IntlErrorCode = /*#__PURE__*/ function(IntlErrorCode) {\n    IntlErrorCode[\"MISSING_MESSAGE\"] = \"MISSING_MESSAGE\";\n    IntlErrorCode[\"MISSING_FORMAT\"] = \"MISSING_FORMAT\";\n    IntlErrorCode[\"ENVIRONMENT_FALLBACK\"] = \"ENVIRONMENT_FALLBACK\";\n    IntlErrorCode[\"INSUFFICIENT_PATH\"] = \"INSUFFICIENT_PATH\";\n    IntlErrorCode[\"INVALID_MESSAGE\"] = \"INVALID_MESSAGE\";\n    IntlErrorCode[\"INVALID_KEY\"] = \"INVALID_KEY\";\n    IntlErrorCode[\"FORMATTING_ERROR\"] = \"FORMATTING_ERROR\";\n    return IntlErrorCode;\n}(IntlErrorCode || {});\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */ function convertFormatsToIntlMessageFormat(globalFormats, inlineFormats, timeZone) {\n    const mfDateDefaults = intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.formats.date;\n    const mfTimeDefaults = intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.formats.time;\n    const dateTimeFormats = {\n        ...globalFormats?.dateTime,\n        ...inlineFormats?.dateTime\n    };\n    const allFormats = {\n        date: {\n            ...mfDateDefaults,\n            ...dateTimeFormats\n        },\n        time: {\n            ...mfTimeDefaults,\n            ...dateTimeFormats\n        },\n        number: {\n            ...globalFormats?.number,\n            ...inlineFormats?.number\n        }\n    };\n    if (timeZone) {\n        // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n        // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n        [\n            \"date\",\n            \"time\"\n        ].forEach((property)=>{\n            const formats = allFormats[property];\n            for (const [key, value] of Object.entries(formats)){\n                formats[key] = {\n                    timeZone,\n                    ...value\n                };\n            }\n        });\n    }\n    return allFormats;\n}\nfunction joinPath(...parts) {\n    return parts.filter(Boolean).join(\".\");\n}\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */ function defaultGetMessageFallback(props) {\n    return joinPath(props.namespace, props.key);\n}\nfunction defaultOnError(error) {\n    console.error(error);\n}\nfunction createCache() {\n    return {\n        dateTime: {},\n        number: {},\n        message: {},\n        relativeTime: {},\n        pluralRules: {},\n        list: {},\n        displayNames: {}\n    };\n}\nfunction createMemoCache(store) {\n    return {\n        create () {\n            return {\n                get (key) {\n                    return store[key];\n                },\n                set (key, value) {\n                    store[key] = value;\n                }\n            };\n        }\n    };\n}\nfunction memoFn(fn, cache) {\n    return (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_1__.memoize)(fn, {\n        cache: createMemoCache(cache),\n        strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_1__.strategies.variadic\n    });\n}\nfunction memoConstructor(ConstructorFn, cache) {\n    return memoFn((...args)=>new ConstructorFn(...args), cache);\n}\nfunction createIntlFormatters(cache) {\n    const getDateTimeFormat = memoConstructor(Intl.DateTimeFormat, cache.dateTime);\n    const getNumberFormat = memoConstructor(Intl.NumberFormat, cache.number);\n    const getPluralRules = memoConstructor(Intl.PluralRules, cache.pluralRules);\n    const getRelativeTimeFormat = memoConstructor(Intl.RelativeTimeFormat, cache.relativeTime);\n    const getListFormat = memoConstructor(Intl.ListFormat, cache.list);\n    const getDisplayNames = memoConstructor(Intl.DisplayNames, cache.displayNames);\n    return {\n        getDateTimeFormat,\n        getNumberFormat,\n        getPluralRules,\n        getRelativeTimeFormat,\n        getListFormat,\n        getDisplayNames\n    };\n}\n// Placed here for improved tree shaking. Somehow when this is placed in\n// `formatters.tsx`, then it can't be shaken off from `next-intl`.\nfunction createMessageFormatter(cache, intlFormatters) {\n    const getMessageFormat = memoFn((...args)=>new intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat(args[0], args[1], args[2], {\n            formatters: intlFormatters,\n            ...args[3]\n        }), cache.message);\n    return getMessageFormat;\n}\nfunction resolvePath(locale, messages, key, namespace) {\n    const fullKey = joinPath(namespace, key);\n    if (!messages) {\n        throw new Error(`No messages available at \\`${namespace}\\`.`);\n    }\n    let message = messages;\n    key.split(\".\").forEach((part)=>{\n        const next = message[part];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (part == null || next == null) {\n            throw new Error(`Could not resolve \\`${fullKey}\\` in messages for locale \\`${locale}\\`.`);\n        }\n        message = next;\n    });\n    return message;\n}\nfunction prepareTranslationValues(values) {\n    // Workaround for https://github.com/formatjs/formatjs/issues/1467\n    const transformedValues = {};\n    Object.keys(values).forEach((key)=>{\n        let index = 0;\n        const value = values[key];\n        let transformed;\n        if (typeof value === \"function\") {\n            transformed = (chunks)=>{\n                const result = value(chunks);\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(result) ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(result, {\n                    key: key + index++\n                }) : result;\n            };\n        } else {\n            transformed = value;\n        }\n        transformedValues[key] = transformed;\n    });\n    return transformedValues;\n}\nfunction getMessagesOrError(locale, messages, namespace, onError = defaultOnError) {\n    try {\n        if (!messages) {\n            throw new Error(`No messages were configured.`);\n        }\n        const retrievedMessages = namespace ? resolvePath(locale, messages, namespace) : messages;\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!retrievedMessages) {\n            throw new Error(`No messages for namespace \\`${namespace}\\` found.`);\n        }\n        return retrievedMessages;\n    } catch (error) {\n        const intlError = new IntlError(IntlErrorCode.MISSING_MESSAGE, error.message);\n        onError(intlError);\n        return intlError;\n    }\n}\nfunction getPlainMessage(candidate, values) {\n    // To improve runtime performance, only compile message if:\n    return(// 1. Values are provided\n    values || // 2. There are escaped braces (e.g. \"'{name'}\")\n    /'[{}]/.test(candidate) || // 3. There are missing arguments or tags (dev-only error handling)\n    /<|{/.test(candidate) ? undefined // Compile\n     : candidate // Don't compile\n    );\n}\nfunction createBaseTranslator(config) {\n    const messagesOrError = getMessagesOrError(config.locale, config.messages, config.namespace, config.onError);\n    return createBaseTranslatorImpl({\n        ...config,\n        messagesOrError\n    });\n}\nfunction createBaseTranslatorImpl({ cache, formats: globalFormats, formatters, getMessageFallback = defaultGetMessageFallback, locale, messagesOrError, namespace, onError, timeZone }) {\n    const hasMessagesError = messagesOrError instanceof IntlError;\n    function getFallbackFromErrorAndNotify(key, code, message) {\n        const error = new IntlError(code, message);\n        onError(error);\n        return getMessageFallback({\n            error,\n            key,\n            namespace\n        });\n    }\n    function translateBaseFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        if (hasMessagesError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        let message;\n        try {\n            message = resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n        if (typeof message === \"object\") {\n            let code, errorMessage;\n            if (Array.isArray(message)) {\n                code = IntlErrorCode.INVALID_MESSAGE;\n                {\n                    errorMessage = `Message at \\`${joinPath(namespace, key)}\\` resolved to an array, but only strings are supported. See https://next-intl.dev/docs/usage/messages#arrays-of-messages`;\n                }\n            } else {\n                code = IntlErrorCode.INSUFFICIENT_PATH;\n                {\n                    errorMessage = `Message at \\`${joinPath(namespace, key)}\\` resolved to an object, but only strings are supported. Use a \\`.\\` to retrieve nested messages. See https://next-intl.dev/docs/usage/messages#structuring-messages`;\n                }\n            }\n            return getFallbackFromErrorAndNotify(key, code, errorMessage);\n        }\n        let messageFormat;\n        // Hot path that avoids creating an `IntlMessageFormat` instance\n        const plainMessage = getPlainMessage(message, values);\n        if (plainMessage) return plainMessage;\n        // Lazy init the message formatter for better tree\n        // shaking in case message formatting is not used.\n        if (!formatters.getMessageFormat) {\n            formatters.getMessageFormat = createMessageFormatter(cache, formatters);\n        }\n        try {\n            messageFormat = formatters.getMessageFormat(message, locale, convertFormatsToIntlMessageFormat(globalFormats, formats, timeZone), {\n                formatters: {\n                    ...formatters,\n                    getDateTimeFormat (locales, options) {\n                        // Workaround for https://github.com/formatjs/formatjs/issues/4279\n                        return formatters.getDateTimeFormat(locales, {\n                            timeZone,\n                            ...options\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            const thrownError = error;\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.INVALID_MESSAGE, thrownError.message + (\"originalMessage\" in thrownError ? ` (${thrownError.originalMessage})` : \"\"));\n        }\n        try {\n            const formattedMessage = messageFormat.format(// @ts-expect-error `intl-messageformat` expects a different format\n            // for rich text elements since a recent minor update. This\n            // needs to be evaluated in detail, possibly also in regards\n            // to be able to format to parts.\n            values ? prepareTranslationValues(values) : values);\n            if (formattedMessage == null) {\n                throw new Error(`Unable to format \\`${key}\\` in ${namespace ? `namespace \\`${namespace}\\`` : \"messages\"}`);\n            }\n            // Limit the function signature to return strings or React elements\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(formattedMessage) || // Arrays of React elements\n            Array.isArray(formattedMessage) || typeof formattedMessage === \"string\" ? formattedMessage : String(formattedMessage);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.FORMATTING_ERROR, error.message);\n        }\n    }\n    function translateFn(/** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key, /** Key value pairs for values to interpolate into the message. */ values, /** Provide custom formats for numbers, dates and times. */ formats) {\n        const result = translateBaseFn(key, values, formats);\n        if (typeof result !== \"string\") {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.INVALID_MESSAGE, `The message \\`${key}\\` in ${namespace ? `namespace \\`${namespace}\\`` : \"messages\"} didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`);\n        }\n        return result;\n    }\n    translateFn.rich = translateBaseFn;\n    // Augment `translateBaseFn` to return plain strings\n    translateFn.markup = (key, values, formats)=>{\n        const result = translateBaseFn(key, // @ts-expect-error -- `MarkupTranslationValues` is practically a sub type\n        // of `RichTranslationValues` but TypeScript isn't smart enough here.\n        values, formats);\n        if (typeof result !== \"string\") {\n            const error = new IntlError(IntlErrorCode.FORMATTING_ERROR, \"`t.markup` only accepts functions for formatting that receive and return strings.\\n\\nE.g. t.markup('markup', {b: (chunks) => `<b>${chunks}</b>`})\");\n            onError(error);\n            return getMessageFallback({\n                error,\n                key,\n                namespace\n            });\n        }\n        return result;\n    };\n    translateFn.raw = (key)=>{\n        if (hasMessagesError) {\n            // We have already warned about this during render\n            return getMessageFallback({\n                error: messagesOrError,\n                key,\n                namespace\n            });\n        }\n        const messages = messagesOrError;\n        try {\n            return resolvePath(locale, messages, key, namespace);\n        } catch (error) {\n            return getFallbackFromErrorAndNotify(key, IntlErrorCode.MISSING_MESSAGE, error.message);\n        }\n    };\n    translateFn.has = (key)=>{\n        if (hasMessagesError) {\n            return false;\n        }\n        try {\n            resolvePath(locale, messagesOrError, key, namespace);\n            return true;\n        } catch  {\n            return false;\n        }\n    };\n    return translateFn;\n}\n/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */ function resolveNamespace(namespace, namespacePrefix) {\n    return namespace === namespacePrefix ? undefined : namespace.slice((namespacePrefix + \".\").length);\n}\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst QUARTER = MONTH * 3;\nconst YEAR = DAY * 365;\nconst UNIT_SECONDS = {\n    second: SECOND,\n    seconds: SECOND,\n    minute: MINUTE,\n    minutes: MINUTE,\n    hour: HOUR,\n    hours: HOUR,\n    day: DAY,\n    days: DAY,\n    week: WEEK,\n    weeks: WEEK,\n    month: MONTH,\n    months: MONTH,\n    quarter: QUARTER,\n    quarters: QUARTER,\n    year: YEAR,\n    years: YEAR\n};\nfunction resolveRelativeTimeUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return \"second\";\n    } else if (absValue < HOUR) {\n        return \"minute\";\n    } else if (absValue < DAY) {\n        return \"hour\";\n    } else if (absValue < WEEK) {\n        return \"day\";\n    } else if (absValue < MONTH) {\n        return \"week\";\n    } else if (absValue < YEAR) {\n        return \"month\";\n    }\n    return \"year\";\n}\nfunction calculateRelativeTimeValue(seconds, unit) {\n    // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n    // will include fractions like '2.1 hours ago'.\n    return Math.round(seconds / UNIT_SECONDS[unit]);\n}\nfunction createFormatter(props) {\n    const { _cache: cache = createCache(), _formatters: formatters = createIntlFormatters(cache), formats, locale, onError = defaultOnError, timeZone: globalTimeZone } = props;\n    function applyTimeZone(options) {\n        if (!options?.timeZone) {\n            if (globalTimeZone) {\n                options = {\n                    ...options,\n                    timeZone: globalTimeZone\n                };\n            } else {\n                onError(new IntlError(IntlErrorCode.ENVIRONMENT_FALLBACK, `The \\`timeZone\\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl.dev/docs/configuration#time-zone`));\n            }\n        }\n        return options;\n    }\n    function resolveFormatOrOptions(typeFormats, formatOrOptions, overrides) {\n        let options;\n        if (typeof formatOrOptions === \"string\") {\n            const formatName = formatOrOptions;\n            options = typeFormats?.[formatName];\n            if (!options) {\n                const error = new IntlError(IntlErrorCode.MISSING_FORMAT, `Format \\`${formatName}\\` is not available.`);\n                onError(error);\n                throw error;\n            }\n        } else {\n            options = formatOrOptions;\n        }\n        if (overrides) {\n            options = {\n                ...options,\n                ...overrides\n            };\n        }\n        return options;\n    }\n    function getFormattedValue(formatOrOptions, overrides, typeFormats, formatter, getFallback) {\n        let options;\n        try {\n            options = resolveFormatOrOptions(typeFormats, formatOrOptions, overrides);\n        } catch  {\n            return getFallback();\n        }\n        try {\n            return formatter(options);\n        } catch (error) {\n            onError(new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message));\n            return getFallback();\n        }\n    }\n    function dateTime(value, formatOrOptions, overrides) {\n        return getFormattedValue(formatOrOptions, overrides, formats?.dateTime, (options)=>{\n            options = applyTimeZone(options);\n            return formatters.getDateTimeFormat(locale, options).format(value);\n        }, ()=>String(value));\n    }\n    function dateTimeRange(start, end, formatOrOptions, overrides) {\n        return getFormattedValue(formatOrOptions, overrides, formats?.dateTime, (options)=>{\n            options = applyTimeZone(options);\n            return formatters.getDateTimeFormat(locale, options).formatRange(start, end);\n        }, ()=>[\n                dateTime(start),\n                dateTime(end)\n            ].join(\" – \"));\n    }\n    function number(value, formatOrOptions, overrides) {\n        return getFormattedValue(formatOrOptions, overrides, formats?.number, (options)=>formatters.getNumberFormat(locale, options).format(value), ()=>String(value));\n    }\n    function getGlobalNow() {\n        // Only read when necessary to avoid triggering a `dynamicIO` error\n        // unnecessarily (`now` is only needed for `format.relativeTime`)\n        if (props.now) {\n            return props.now;\n        } else {\n            onError(new IntlError(IntlErrorCode.ENVIRONMENT_FALLBACK, `The \\`now\\` parameter wasn't provided to \\`relativeTime\\` and there is no global default configured, therefore the current time will be used as a fallback. See https://next-intl.dev/docs/usage/dates-times#relative-times-usenow`));\n            return new Date();\n        }\n    }\n    function relativeTime(date, nowOrOptions) {\n        try {\n            let nowDate, unit;\n            const opts = {};\n            if (nowOrOptions instanceof Date || typeof nowOrOptions === \"number\") {\n                nowDate = new Date(nowOrOptions);\n            } else if (nowOrOptions) {\n                if (nowOrOptions.now != null) {\n                    nowDate = new Date(nowOrOptions.now);\n                } else {\n                    nowDate = getGlobalNow();\n                }\n                unit = nowOrOptions.unit;\n                opts.style = nowOrOptions.style;\n                // @ts-expect-error -- Types are slightly outdated\n                opts.numberingSystem = nowOrOptions.numberingSystem;\n            }\n            if (!nowDate) {\n                nowDate = getGlobalNow();\n            }\n            const dateDate = new Date(date);\n            const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n            if (!unit) {\n                unit = resolveRelativeTimeUnit(seconds);\n            }\n            // `numeric: 'auto'` can theoretically produce output like \"yesterday\",\n            // but it only works with integers. E.g. -1 day will produce \"yesterday\",\n            // but -1.1 days will produce \"-1.1 days\". Rounding before formatting is\n            // not desired, as the given dates might cross a threshold were the\n            // output isn't correct anymore. Example: 2024-01-08T23:00:00.000Z and\n            // 2024-01-08T01:00:00.000Z would produce \"yesterday\", which is not the\n            // case. By using `always` we can ensure correct output. The only exception\n            // is the formatting of times <1 second as \"now\".\n            opts.numeric = unit === \"second\" ? \"auto\" : \"always\";\n            const value = calculateRelativeTimeValue(seconds, unit);\n            return formatters.getRelativeTimeFormat(locale, opts).format(value, unit);\n        } catch (error) {\n            onError(new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message));\n            return String(date);\n        }\n    }\n    function list(value, formatOrOptions, overrides) {\n        const serializedValue = [];\n        const richValues = new Map();\n        // `formatToParts` only accepts strings, therefore we have to temporarily\n        // replace React elements with a placeholder ID that can be used to retrieve\n        // the original value afterwards.\n        let index = 0;\n        for (const item of value){\n            let serializedItem;\n            if (typeof item === \"object\") {\n                serializedItem = String(index);\n                richValues.set(serializedItem, item);\n            } else {\n                serializedItem = String(item);\n            }\n            serializedValue.push(serializedItem);\n            index++;\n        }\n        return getFormattedValue(formatOrOptions, overrides, formats?.list, // @ts-expect-error -- `richValues.size` is used to determine the return type, but TypeScript can't infer the meaning of this correctly\n        (options)=>{\n            const result = formatters.getListFormat(locale, options).formatToParts(serializedValue).map((part)=>part.type === \"literal\" ? part.value : richValues.get(part.value) || part.value);\n            if (richValues.size > 0) {\n                return result;\n            } else {\n                return result.join(\"\");\n            }\n        }, ()=>String(value));\n    }\n    return {\n        dateTime,\n        number,\n        relativeTime,\n        list,\n        dateTimeRange\n    };\n}\nfunction validateMessagesSegment(messages, invalidKeyLabels, parentPath) {\n    Object.entries(messages).forEach(([key, messageOrMessages])=>{\n        if (key.includes(\".\")) {\n            let keyLabel = key;\n            if (parentPath) keyLabel += ` (at ${parentPath})`;\n            invalidKeyLabels.push(keyLabel);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (messageOrMessages != null && typeof messageOrMessages === \"object\") {\n            validateMessagesSegment(messageOrMessages, invalidKeyLabels, joinPath(parentPath, key));\n        }\n    });\n}\nfunction validateMessages(messages, onError) {\n    const invalidKeyLabels = [];\n    validateMessagesSegment(messages, invalidKeyLabels);\n    if (invalidKeyLabels.length > 0) {\n        onError(new IntlError(IntlErrorCode.INVALID_KEY, `Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\n\nInvalid ${invalidKeyLabels.length === 1 ? \"key\" : \"keys\"}: ${invalidKeyLabels.join(\", \")}\n\nIf you're migrating from a flat structure, you can convert your messages as follows:\n\nimport {set} from \"lodash\";\n\nconst input = {\n  \"one.one\": \"1.1\",\n  \"one.two\": \"1.2\",\n  \"two.one.one\": \"2.1.1\"\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n\n// Output:\n//\n// {\n//   \"one\": {\n//     \"one\": \"1.1\",\n//     \"two\": \"1.2\"\n//   },\n//   \"two\": {\n//     \"one\": {\n//       \"one\": \"2.1.1\"\n//     }\n//   }\n// }\n`));\n    }\n}\n/**\n * Enhances the incoming props with defaults.\n */ function initializeConfig({ formats, getMessageFallback, messages, onError, ...rest }) {\n    const finalOnError = onError || defaultOnError;\n    const finalGetMessageFallback = getMessageFallback || defaultGetMessageFallback;\n    {\n        if (messages) {\n            validateMessages(messages, finalOnError);\n        }\n    }\n    return {\n        ...rest,\n        formats: formats || undefined,\n        messages: messages || undefined,\n        onError: finalOnError,\n        getMessageFallback: finalGetMessageFallback\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9lc20vZGV2ZWxvcG1lbnQvaW5pdGlhbGl6ZUNvbmZpZy1EUEZudnNVTy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQXVEO0FBQ0Y7QUFDUTtBQUU3RCxNQUFNSyxrQkFBa0JDO0lBQ3RCQyxZQUFZQyxJQUFJLEVBQUVDLGVBQWUsQ0FBRTtRQUNqQyxJQUFJQyxVQUFVRjtRQUNkLElBQUlDLGlCQUFpQjtZQUNuQkMsV0FBVyxPQUFPRDtRQUNwQjtRQUNBLEtBQUssQ0FBQ0M7UUFDTixJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJQyxpQkFBaUI7WUFDbkIsSUFBSSxDQUFDQSxlQUFlLEdBQUdBO1FBQ3pCO0lBQ0Y7QUFDRjtBQUVBLElBQUlFLGdCQUFnQixXQUFXLEdBQUUsU0FBVUEsYUFBYTtJQUN0REEsYUFBYSxDQUFDLGtCQUFrQixHQUFHO0lBQ25DQSxhQUFhLENBQUMsaUJBQWlCLEdBQUc7SUFDbENBLGFBQWEsQ0FBQyx1QkFBdUIsR0FBRztJQUN4Q0EsYUFBYSxDQUFDLG9CQUFvQixHQUFHO0lBQ3JDQSxhQUFhLENBQUMsa0JBQWtCLEdBQUc7SUFDbkNBLGFBQWEsQ0FBQyxjQUFjLEdBQUc7SUFDL0JBLGFBQWEsQ0FBQyxtQkFBbUIsR0FBRztJQUNwQyxPQUFPQTtBQUNULEVBQUVBLGlCQUFpQixDQUFDO0FBRXBCOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLGtDQUFrQ0MsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLFFBQVE7SUFDL0UsTUFBTUMsaUJBQWlCaEIsaUVBQWlCQSxDQUFDaUIsT0FBTyxDQUFDQyxJQUFJO0lBQ3JELE1BQU1DLGlCQUFpQm5CLGlFQUFpQkEsQ0FBQ2lCLE9BQU8sQ0FBQ0csSUFBSTtJQUNyRCxNQUFNQyxrQkFBa0I7UUFDdEIsR0FBR1IsZUFBZVMsUUFBUTtRQUMxQixHQUFHUixlQUFlUSxRQUFRO0lBQzVCO0lBQ0EsTUFBTUMsYUFBYTtRQUNqQkws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O1FBRUEsdUVBQXVFO1FBQ3ZFLElBQUlGLHFCQUFxQixRQUFRLE9BQU9BLHNCQUFzQixVQUFVO1lBQ3RFSCx3QkFBd0JHLG1CQUFtQkYsa0JBQWtCL0ssU0FBU2dMLFlBQVlwTDtRQUNwRjtJQUNGO0FBQ0Y7QUFDQSxTQUFTd0wsaUJBQWlCbkksUUFBUSxFQUFFYyxPQUFPO0lBQ3pDLE1BQU1nSCxtQkFBbUIsRUFBRTtJQUMzQkQsd0JBQXdCN0gsVUFBVThIO0lBQ2xDLElBQUlBLGlCQUFpQjFFLE1BQU0sR0FBRyxHQUFHO1FBQy9CdEMsUUFBUSxJQUFJekYsVUFBVU0sY0FBY3lNLFdBQVcsRUFBRSxDQUFDOztRQUU5QyxFQUFFTixpQkFBaUIxRSxNQUFNLEtBQUssSUFBSSxRQUFRLE9BQU8sRUFBRSxFQUFFMEUsaUJBQWlCM0ssSUFBSSxDQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCekYsQ0FBQztJQUNDO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVNrTCxpQkFBaUIsRUFDeEJwTSxPQUFPLEVBQ1B5RixrQkFBa0IsRUFDbEIxQixRQUFRLEVBQ1JjLE9BQU8sRUFDUCxHQUFHd0gsTUFDSjtJQUNDLE1BQU1DLGVBQWV6SCxXQUFXdkQ7SUFDaEMsTUFBTWlMLDBCQUEwQjlHLHNCQUFzQnRFO0lBQ3REO1FBQ0UsSUFBSTRDLFVBQVU7WUFDWm1JLGlCQUFpQm5JLFVBQVV1STtRQUM3QjtJQUNGO0lBQ0EsT0FBTztRQUNMLEdBQUdELElBQUk7UUFDUHJNLFNBQVNBLFdBQVdvRjtRQUNwQnJCLFVBQVVBLFlBQVlxQjtRQUN0QlAsU0FBU3lIO1FBQ1Q3RyxvQkFBb0I4RztJQUN0QjtBQUNGO0FBRStPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyLWltcG9ydC1sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL3VzZS1pbnRsL2Rpc3QvZXNtL2RldmVsb3BtZW50L2luaXRpYWxpemVDb25maWctRFBGbnZzVU8uanM/YmI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRsTWVzc2FnZUZvcm1hdCB9IGZyb20gJ2ludGwtbWVzc2FnZWZvcm1hdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudCwgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWVtb2l6ZSwgc3RyYXRlZ2llcyB9IGZyb20gJ0Bmb3JtYXRqcy9mYXN0LW1lbW9pemUnO1xuXG5jbGFzcyBJbnRsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNvZGUsIG9yaWdpbmFsTWVzc2FnZSkge1xuICAgIGxldCBtZXNzYWdlID0gY29kZTtcbiAgICBpZiAob3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICBtZXNzYWdlICs9ICc6ICcgKyBvcmlnaW5hbE1lc3NhZ2U7XG4gICAgfVxuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgaWYgKG9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBvcmlnaW5hbE1lc3NhZ2U7XG4gICAgfVxuICB9XG59XG5cbnZhciBJbnRsRXJyb3JDb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChJbnRsRXJyb3JDb2RlKSB7XG4gIEludGxFcnJvckNvZGVbXCJNSVNTSU5HX01FU1NBR0VcIl0gPSBcIk1JU1NJTkdfTUVTU0FHRVwiO1xuICBJbnRsRXJyb3JDb2RlW1wiTUlTU0lOR19GT1JNQVRcIl0gPSBcIk1JU1NJTkdfRk9STUFUXCI7XG4gIEludGxFcnJvckNvZGVbXCJFTlZJUk9OTUVOVF9GQUxMQkFDS1wiXSA9IFwiRU5WSVJPTk1FTlRfRkFMTEJBQ0tcIjtcbiAgSW50bEVycm9yQ29kZVtcIklOU1VGRklDSUVOVF9QQVRIXCJdID0gXCJJTlNVRkZJQ0lFTlRfUEFUSFwiO1xuICBJbnRsRXJyb3JDb2RlW1wiSU5WQUxJRF9NRVNTQUdFXCJdID0gXCJJTlZBTElEX01FU1NBR0VcIjtcbiAgSW50bEVycm9yQ29kZVtcIklOVkFMSURfS0VZXCJdID0gXCJJTlZBTElEX0tFWVwiO1xuICBJbnRsRXJyb3JDb2RlW1wiRk9STUFUVElOR19FUlJPUlwiXSA9IFwiRk9STUFUVElOR19FUlJPUlwiO1xuICByZXR1cm4gSW50bEVycm9yQ29kZTtcbn0oSW50bEVycm9yQ29kZSB8fCB7fSk7XG5cbi8qKlxuICogYGludGwtbWVzc2FnZWZvcm1hdGAgdXNlcyBzZXBhcmF0ZSBrZXlzIGZvciBgZGF0ZWAgYW5kIGB0aW1lYCwgYnV0IHRoZXJlJ3NcbiAqIG9ubHkgb25lIG5hdGl2ZSBBUEk6IGBJbnRsLkRhdGVUaW1lRm9ybWF0YC4gQWRkaXRpb25hbGx5IHlvdSBtaWdodCB3YW50IHRvXG4gKiBpbmNsdWRlIGJvdGggYSB0aW1lIGFuZCBhIGRhdGUgaW4gYSB2YWx1ZSwgdGhlcmVmb3JlIHRoZSBzZXBhcmF0aW9uIGRvZXNuJ3RcbiAqIHNlZW0gc28gdXNlZnVsLiBXZSBvZmZlciBhIHNpbmdsZSBgZGF0ZVRpbWVgIG5hbWVzcGFjZSBpbnN0ZWFkLCBidXQgd2UgaGF2ZVxuICogdG8gY29udmVydCB0aGUgZm9ybWF0IGJlZm9yZSBgaW50bC1tZXNzYWdlZm9ybWF0YCBjYW4gYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gY29udmVydEZvcm1hdHNUb0ludGxNZXNzYWdlRm9ybWF0KGdsb2JhbEZvcm1hdHMsIGlubGluZUZvcm1hdHMsIHRpbWVab25lKSB7XG4gIGNvbnN0IG1mRGF0ZURlZmF1bHRzID0gSW50bE1lc3NhZ2VGb3JtYXQuZm9ybWF0cy5kYXRlO1xuICBjb25zdCBtZlRpbWVEZWZhdWx0cyA9IEludGxNZXNzYWdlRm9ybWF0LmZvcm1hdHMudGltZTtcbiAgY29uc3QgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICAgIC4uLmdsb2JhbEZvcm1hdHM/LmRhdGVUaW1lLFxuICAgIC4uLmlubGluZUZvcm1hdHM/LmRhdGVUaW1lXG4gIH07XG4gIGNvbnN0IGFsbEZvcm1hdHMgPSB7XG4gICAgZGF0ZToge1xuICAgICAgLi4ubWZEYXRlRGVmYXVsdHMsXG4gICAgICAuLi5kYXRlVGltZUZvcm1hdHNcbiAgICB9LFxuICAgIHRpbWU6IHtcbiAgICAgIC4uLm1mVGltZURlZmF1bHRzLFxuICAgICAgLi4uZGF0ZVRpbWVGb3JtYXRzXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgIC4uLmdsb2JhbEZvcm1hdHM/Lm51bWJlcixcbiAgICAgIC4uLmlubGluZUZvcm1hdHM/Lm51bWJlclxuICAgIH1cbiAgICAvLyAobGlzdCBpcyBub3Qgc3VwcG9ydGVkIGluIElDVSBtZXNzYWdlcylcbiAgfTtcbiAgaWYgKHRpbWVab25lKSB7XG4gICAgLy8gVGhlIG9ubHkgd2F5IHRvIHNldCBhIHRpbWUgem9uZSB3aXRoIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGlzIHRvIG1lcmdlIGl0IGludG8gdGhlIGZvcm1hdHNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvZm9ybWF0anMvYmxvYi84MjU2YzUyNzE1MDVjZjI2MDZlNDhlM2M5N2VjZGQxNmVkZTRmMWI1L3BhY2thZ2VzL2ludGwvc3JjL21lc3NhZ2UudHMjTDE1XG4gICAgWydkYXRlJywgJ3RpbWUnXS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIGNvbnN0IGZvcm1hdHMgPSBhbGxGb3JtYXRzW3Byb3BlcnR5XTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGZvcm1hdHMpKSB7XG4gICAgICAgIGZvcm1hdHNba2V5XSA9IHtcbiAgICAgICAgICB0aW1lWm9uZSxcbiAgICAgICAgICAuLi52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBhbGxGb3JtYXRzO1xufVxuXG5mdW5jdGlvbiBqb2luUGF0aCguLi5wYXJ0cykge1xuICByZXR1cm4gcGFydHMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy4nKTtcbn1cblxuLyoqXG4gKiBDb250YWlucyBkZWZhdWx0cyB0aGF0IGFyZSB1c2VkIGZvciBhbGwgZW50cnkgcG9pbnRzIGludG8gdGhlIGNvcmUuXG4gKiBTZWUgYWxzbyBgSW5pdGlhbGl6ZWRJbnRsQ29uZmlndXJhdGlvbmAuXG4gKi9cblxuZnVuY3Rpb24gZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayhwcm9wcykge1xuICByZXR1cm4gam9pblBhdGgocHJvcHMubmFtZXNwYWNlLCBwcm9wcy5rZXkpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcihlcnJvcik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuICByZXR1cm4ge1xuICAgIGRhdGVUaW1lOiB7fSxcbiAgICBudW1iZXI6IHt9LFxuICAgIG1lc3NhZ2U6IHt9LFxuICAgIHJlbGF0aXZlVGltZToge30sXG4gICAgcGx1cmFsUnVsZXM6IHt9LFxuICAgIGxpc3Q6IHt9LFxuICAgIGRpc3BsYXlOYW1lczoge31cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9DYWNoZShzdG9yZSkge1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gc3RvcmVba2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBzdG9yZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbWVtb0ZuKGZuLCBjYWNoZSkge1xuICByZXR1cm4gbWVtb2l6ZShmbiwge1xuICAgIGNhY2hlOiBjcmVhdGVNZW1vQ2FjaGUoY2FjaGUpLFxuICAgIHN0cmF0ZWd5OiBzdHJhdGVnaWVzLnZhcmlhZGljXG4gIH0pO1xufVxuZnVuY3Rpb24gbWVtb0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yRm4sIGNhY2hlKSB7XG4gIHJldHVybiBtZW1vRm4oKC4uLmFyZ3MpID0+IG5ldyBDb25zdHJ1Y3RvckZuKC4uLmFyZ3MpLCBjYWNoZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVJbnRsRm9ybWF0dGVycyhjYWNoZSkge1xuICBjb25zdCBnZXREYXRlVGltZUZvcm1hdCA9IG1lbW9Db25zdHJ1Y3RvcihJbnRsLkRhdGVUaW1lRm9ybWF0LCBjYWNoZS5kYXRlVGltZSk7XG4gIGNvbnN0IGdldE51bWJlckZvcm1hdCA9IG1lbW9Db25zdHJ1Y3RvcihJbnRsLk51bWJlckZvcm1hdCwgY2FjaGUubnVtYmVyKTtcbiAgY29uc3QgZ2V0UGx1cmFsUnVsZXMgPSBtZW1vQ29uc3RydWN0b3IoSW50bC5QbHVyYWxSdWxlcywgY2FjaGUucGx1cmFsUnVsZXMpO1xuICBjb25zdCBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQgPSBtZW1vQ29uc3RydWN0b3IoSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQsIGNhY2hlLnJlbGF0aXZlVGltZSk7XG4gIGNvbnN0IGdldExpc3RGb3JtYXQgPSBtZW1vQ29uc3RydWN0b3IoSW50bC5MaXN0Rm9ybWF0LCBjYWNoZS5saXN0KTtcbiAgY29uc3QgZ2V0RGlzcGxheU5hbWVzID0gbWVtb0NvbnN0cnVjdG9yKEludGwuRGlzcGxheU5hbWVzLCBjYWNoZS5kaXNwbGF5TmFtZXMpO1xuICByZXR1cm4ge1xuICAgIGdldERhdGVUaW1lRm9ybWF0LFxuICAgIGdldE51bWJlckZvcm1hdCxcbiAgICBnZXRQbHVyYWxSdWxlcyxcbiAgICBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQsXG4gICAgZ2V0TGlzdEZvcm1hdCxcbiAgICBnZXREaXNwbGF5TmFtZXNcbiAgfTtcbn1cblxuLy8gUGxhY2VkIGhlcmUgZm9yIGltcHJvdmVkIHRyZWUgc2hha2luZy4gU29tZWhvdyB3aGVuIHRoaXMgaXMgcGxhY2VkIGluXG4vLyBgZm9ybWF0dGVycy50c3hgLCB0aGVuIGl0IGNhbid0IGJlIHNoYWtlbiBvZmYgZnJvbSBgbmV4dC1pbnRsYC5cbmZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2VGb3JtYXR0ZXIoY2FjaGUsIGludGxGb3JtYXR0ZXJzKSB7XG4gIGNvbnN0IGdldE1lc3NhZ2VGb3JtYXQgPSBtZW1vRm4oKC4uLmFyZ3MpID0+IG5ldyBJbnRsTWVzc2FnZUZvcm1hdChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCB7XG4gICAgZm9ybWF0dGVyczogaW50bEZvcm1hdHRlcnMsXG4gICAgLi4uYXJnc1szXVxuICB9KSwgY2FjaGUubWVzc2FnZSk7XG4gIHJldHVybiBnZXRNZXNzYWdlRm9ybWF0O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywga2V5LCBuYW1lc3BhY2UpIHtcbiAgY29uc3QgZnVsbEtleSA9IGpvaW5QYXRoKG5hbWVzcGFjZSwga2V5KTtcbiAgaWYgKCFtZXNzYWdlcykge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWVzc2FnZXMgYXZhaWxhYmxlIGF0IFxcYCR7bmFtZXNwYWNlfVxcYC5gICk7XG4gIH1cbiAgbGV0IG1lc3NhZ2UgPSBtZXNzYWdlcztcbiAga2V5LnNwbGl0KCcuJykuZm9yRWFjaChwYXJ0ID0+IHtcbiAgICBjb25zdCBuZXh0ID0gbWVzc2FnZVtwYXJ0XTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgaWYgKHBhcnQgPT0gbnVsbCB8fCBuZXh0ID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IHJlc29sdmUgXFxgJHtmdWxsS2V5fVxcYCBpbiBtZXNzYWdlcyBmb3IgbG9jYWxlIFxcYCR7bG9jYWxlfVxcYC5gICk7XG4gICAgfVxuICAgIG1lc3NhZ2UgPSBuZXh0O1xuICB9KTtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiBwcmVwYXJlVHJhbnNsYXRpb25WYWx1ZXModmFsdWVzKSB7XG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtYXRqcy9mb3JtYXRqcy9pc3N1ZXMvMTQ2N1xuICBjb25zdCB0cmFuc2Zvcm1lZFZhbHVlcyA9IHt9O1xuICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgbGV0IHRyYW5zZm9ybWVkO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyYW5zZm9ybWVkID0gY2h1bmtzID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUoY2h1bmtzKTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9pc1ZhbGlkRWxlbWVudChyZXN1bHQpID8gLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChyZXN1bHQsIHtcbiAgICAgICAgICBrZXk6IGtleSArIGluZGV4KytcbiAgICAgICAgfSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IHZhbHVlO1xuICAgIH1cbiAgICB0cmFuc2Zvcm1lZFZhbHVlc1trZXldID0gdHJhbnNmb3JtZWQ7XG4gIH0pO1xuICByZXR1cm4gdHJhbnNmb3JtZWRWYWx1ZXM7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlc09yRXJyb3IobG9jYWxlLCBtZXNzYWdlcywgbmFtZXNwYWNlLCBvbkVycm9yID0gZGVmYXVsdE9uRXJyb3IpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIW1lc3NhZ2VzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1lc3NhZ2VzIHdlcmUgY29uZmlndXJlZC5gICk7XG4gICAgfVxuICAgIGNvbnN0IHJldHJpZXZlZE1lc3NhZ2VzID0gbmFtZXNwYWNlID8gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywgbmFtZXNwYWNlKSA6IG1lc3NhZ2VzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICBpZiAoIXJldHJpZXZlZE1lc3NhZ2VzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1lc3NhZ2VzIGZvciBuYW1lc3BhY2UgXFxgJHtuYW1lc3BhY2V9XFxgIGZvdW5kLmAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHJpZXZlZE1lc3NhZ2VzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGludGxFcnJvciA9IG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5NSVNTSU5HX01FU1NBR0UsIGVycm9yLm1lc3NhZ2UpO1xuICAgIG9uRXJyb3IoaW50bEVycm9yKTtcbiAgICByZXR1cm4gaW50bEVycm9yO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQbGFpbk1lc3NhZ2UoY2FuZGlkYXRlLCB2YWx1ZXMpIHtcbiAgLy8gVG8gaW1wcm92ZSBydW50aW1lIHBlcmZvcm1hbmNlLCBvbmx5IGNvbXBpbGUgbWVzc2FnZSBpZjpcbiAgcmV0dXJuIChcbiAgICAvLyAxLiBWYWx1ZXMgYXJlIHByb3ZpZGVkXG4gICAgdmFsdWVzIHx8XG4gICAgLy8gMi4gVGhlcmUgYXJlIGVzY2FwZWQgYnJhY2VzIChlLmcuIFwiJ3tuYW1lJ31cIilcbiAgICAvJ1t7fV0vLnRlc3QoY2FuZGlkYXRlKSB8fFxuICAgIC8vIDMuIFRoZXJlIGFyZSBtaXNzaW5nIGFyZ3VtZW50cyBvciB0YWdzIChkZXYtb25seSBlcnJvciBoYW5kbGluZylcbiAgICAvPHx7Ly50ZXN0KGNhbmRpZGF0ZSkgPyB1bmRlZmluZWQgLy8gQ29tcGlsZVxuICAgIDogY2FuZGlkYXRlIC8vIERvbid0IGNvbXBpbGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VUcmFuc2xhdG9yKGNvbmZpZykge1xuICBjb25zdCBtZXNzYWdlc09yRXJyb3IgPSBnZXRNZXNzYWdlc09yRXJyb3IoY29uZmlnLmxvY2FsZSwgY29uZmlnLm1lc3NhZ2VzLCBjb25maWcubmFtZXNwYWNlLCBjb25maWcub25FcnJvcik7XG4gIHJldHVybiBjcmVhdGVCYXNlVHJhbnNsYXRvckltcGwoe1xuICAgIC4uLmNvbmZpZyxcbiAgICBtZXNzYWdlc09yRXJyb3JcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVCYXNlVHJhbnNsYXRvckltcGwoe1xuICBjYWNoZSxcbiAgZm9ybWF0czogZ2xvYmFsRm9ybWF0cyxcbiAgZm9ybWF0dGVycyxcbiAgZ2V0TWVzc2FnZUZhbGxiYWNrID0gZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayxcbiAgbG9jYWxlLFxuICBtZXNzYWdlc09yRXJyb3IsXG4gIG5hbWVzcGFjZSxcbiAgb25FcnJvcixcbiAgdGltZVpvbmVcbn0pIHtcbiAgY29uc3QgaGFzTWVzc2FnZXNFcnJvciA9IG1lc3NhZ2VzT3JFcnJvciBpbnN0YW5jZW9mIEludGxFcnJvcjtcbiAgZnVuY3Rpb24gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgSW50bEVycm9yKGNvZGUsIG1lc3NhZ2UpO1xuICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiBnZXRNZXNzYWdlRmFsbGJhY2soe1xuICAgICAgZXJyb3IsXG4gICAgICBrZXksXG4gICAgICBuYW1lc3BhY2VcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB0cmFuc2xhdGVCYXNlRm4oLyoqIFVzZSBhIGRvdCB0byBpbmRpY2F0ZSBhIGxldmVsIG9mIG5lc3RpbmcgKGUuZy4gYG5hbWVzcGFjZS5uZXN0ZWRMYWJlbGApLiAqL1xuICBrZXksIC8qKiBLZXkgdmFsdWUgcGFpcnMgZm9yIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBpbnRvIHRoZSBtZXNzYWdlLiAqL1xuICB2YWx1ZXMsIC8qKiBQcm92aWRlIGN1c3RvbSBmb3JtYXRzIGZvciBudW1iZXJzLCBkYXRlcyBhbmQgdGltZXMuICovXG4gIGZvcm1hdHMpIHtcbiAgICBpZiAoaGFzTWVzc2FnZXNFcnJvcikge1xuICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBhYm91dCB0aGlzIGR1cmluZyByZW5kZXJcbiAgICAgIHJldHVybiBnZXRNZXNzYWdlRmFsbGJhY2soe1xuICAgICAgICBlcnJvcjogbWVzc2FnZXNPckVycm9yLFxuICAgICAgICBrZXksXG4gICAgICAgIG5hbWVzcGFjZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VzID0gbWVzc2FnZXNPckVycm9yO1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlID0gcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlcywga2V5LCBuYW1lc3BhY2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBJbnRsRXJyb3JDb2RlLk1JU1NJTkdfTUVTU0FHRSwgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGxldCBjb2RlLCBlcnJvck1lc3NhZ2U7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICBjb2RlID0gSW50bEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0U7XG4gICAgICAgIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBgTWVzc2FnZSBhdCBcXGAke2pvaW5QYXRoKG5hbWVzcGFjZSwga2V5KX1cXGAgcmVzb2x2ZWQgdG8gYW4gYXJyYXksIGJ1dCBvbmx5IHN0cmluZ3MgYXJlIHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vbmV4dC1pbnRsLmRldi9kb2NzL3VzYWdlL21lc3NhZ2VzI2FycmF5cy1vZi1tZXNzYWdlc2A7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvZGUgPSBJbnRsRXJyb3JDb2RlLklOU1VGRklDSUVOVF9QQVRIO1xuICAgICAgICB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gYE1lc3NhZ2UgYXQgXFxgJHtqb2luUGF0aChuYW1lc3BhY2UsIGtleSl9XFxgIHJlc29sdmVkIHRvIGFuIG9iamVjdCwgYnV0IG9ubHkgc3RyaW5ncyBhcmUgc3VwcG9ydGVkLiBVc2UgYSBcXGAuXFxgIHRvIHJldHJpZXZlIG5lc3RlZCBtZXNzYWdlcy4gU2VlIGh0dHBzOi8vbmV4dC1pbnRsLmRldi9kb2NzL3VzYWdlL21lc3NhZ2VzI3N0cnVjdHVyaW5nLW1lc3NhZ2VzYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgY29kZSwgZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgbGV0IG1lc3NhZ2VGb3JtYXQ7XG5cbiAgICAvLyBIb3QgcGF0aCB0aGF0IGF2b2lkcyBjcmVhdGluZyBhbiBgSW50bE1lc3NhZ2VGb3JtYXRgIGluc3RhbmNlXG4gICAgY29uc3QgcGxhaW5NZXNzYWdlID0gZ2V0UGxhaW5NZXNzYWdlKG1lc3NhZ2UsIHZhbHVlcyk7XG4gICAgaWYgKHBsYWluTWVzc2FnZSkgcmV0dXJuIHBsYWluTWVzc2FnZTtcblxuICAgIC8vIExhenkgaW5pdCB0aGUgbWVzc2FnZSBmb3JtYXR0ZXIgZm9yIGJldHRlciB0cmVlXG4gICAgLy8gc2hha2luZyBpbiBjYXNlIG1lc3NhZ2UgZm9ybWF0dGluZyBpcyBub3QgdXNlZC5cbiAgICBpZiAoIWZvcm1hdHRlcnMuZ2V0TWVzc2FnZUZvcm1hdCkge1xuICAgICAgZm9ybWF0dGVycy5nZXRNZXNzYWdlRm9ybWF0ID0gY3JlYXRlTWVzc2FnZUZvcm1hdHRlcihjYWNoZSwgZm9ybWF0dGVycyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlRm9ybWF0ID0gZm9ybWF0dGVycy5nZXRNZXNzYWdlRm9ybWF0KG1lc3NhZ2UsIGxvY2FsZSwgY29udmVydEZvcm1hdHNUb0ludGxNZXNzYWdlRm9ybWF0KGdsb2JhbEZvcm1hdHMsIGZvcm1hdHMsIHRpbWVab25lKSwge1xuICAgICAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgICAgLi4uZm9ybWF0dGVycyxcbiAgICAgICAgICBnZXREYXRlVGltZUZvcm1hdChsb2NhbGVzLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvZm9ybWF0anMvaXNzdWVzLzQyNzlcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZXMsIHtcbiAgICAgICAgICAgICAgdGltZVpvbmUsXG4gICAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHRocm93bkVycm9yID0gZXJyb3I7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2tGcm9tRXJyb3JBbmROb3RpZnkoa2V5LCBJbnRsRXJyb3JDb2RlLklOVkFMSURfTUVTU0FHRSwgdGhyb3duRXJyb3IubWVzc2FnZSArICgnb3JpZ2luYWxNZXNzYWdlJyBpbiB0aHJvd25FcnJvciA/IGAgKCR7dGhyb3duRXJyb3Iub3JpZ2luYWxNZXNzYWdlfSlgIDogJycpICk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gbWVzc2FnZUZvcm1hdC5mb3JtYXQoXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBpbnRsLW1lc3NhZ2Vmb3JtYXRgIGV4cGVjdHMgYSBkaWZmZXJlbnQgZm9ybWF0XG4gICAgICAvLyBmb3IgcmljaCB0ZXh0IGVsZW1lbnRzIHNpbmNlIGEgcmVjZW50IG1pbm9yIHVwZGF0ZS4gVGhpc1xuICAgICAgLy8gbmVlZHMgdG8gYmUgZXZhbHVhdGVkIGluIGRldGFpbCwgcG9zc2libHkgYWxzbyBpbiByZWdhcmRzXG4gICAgICAvLyB0byBiZSBhYmxlIHRvIGZvcm1hdCB0byBwYXJ0cy5cbiAgICAgIHZhbHVlcyA/IHByZXBhcmVUcmFuc2xhdGlvblZhbHVlcyh2YWx1ZXMpIDogdmFsdWVzKTtcbiAgICAgIGlmIChmb3JtYXR0ZWRNZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZm9ybWF0IFxcYCR7a2V5fVxcYCBpbiAke25hbWVzcGFjZSA/IGBuYW1lc3BhY2UgXFxgJHtuYW1lc3BhY2V9XFxgYCA6ICdtZXNzYWdlcyd9YCApO1xuICAgICAgfVxuXG4gICAgICAvLyBMaW1pdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIHRvIHJldHVybiBzdHJpbmdzIG9yIFJlYWN0IGVsZW1lbnRzXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2lzVmFsaWRFbGVtZW50KGZvcm1hdHRlZE1lc3NhZ2UpIHx8XG4gICAgICAvLyBBcnJheXMgb2YgUmVhY3QgZWxlbWVudHNcbiAgICAgIEFycmF5LmlzQXJyYXkoZm9ybWF0dGVkTWVzc2FnZSkgfHwgdHlwZW9mIGZvcm1hdHRlZE1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZm9ybWF0dGVkTWVzc2FnZSA6IFN0cmluZyhmb3JtYXR0ZWRNZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgSW50bEVycm9yQ29kZS5GT1JNQVRUSU5HX0VSUk9SLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNsYXRlRm4oLyoqIFVzZSBhIGRvdCB0byBpbmRpY2F0ZSBhIGxldmVsIG9mIG5lc3RpbmcgKGUuZy4gYG5hbWVzcGFjZS5uZXN0ZWRMYWJlbGApLiAqL1xuICBrZXksIC8qKiBLZXkgdmFsdWUgcGFpcnMgZm9yIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBpbnRvIHRoZSBtZXNzYWdlLiAqL1xuICB2YWx1ZXMsIC8qKiBQcm92aWRlIGN1c3RvbSBmb3JtYXRzIGZvciBudW1iZXJzLCBkYXRlcyBhbmQgdGltZXMuICovXG4gIGZvcm1hdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0cmFuc2xhdGVCYXNlRm4oa2V5LCB2YWx1ZXMsIGZvcm1hdHMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgSW50bEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0UsIGBUaGUgbWVzc2FnZSBcXGAke2tleX1cXGAgaW4gJHtuYW1lc3BhY2UgPyBgbmFtZXNwYWNlIFxcYCR7bmFtZXNwYWNlfVxcYGAgOiAnbWVzc2FnZXMnfSBkaWRuJ3QgcmVzb2x2ZSB0byBhIHN0cmluZy4gSWYgeW91IHdhbnQgdG8gZm9ybWF0IHJpY2ggdGV4dCwgdXNlIFxcYHQucmljaFxcYCBpbnN0ZWFkLmAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0cmFuc2xhdGVGbi5yaWNoID0gdHJhbnNsYXRlQmFzZUZuO1xuXG4gIC8vIEF1Z21lbnQgYHRyYW5zbGF0ZUJhc2VGbmAgdG8gcmV0dXJuIHBsYWluIHN0cmluZ3NcbiAgdHJhbnNsYXRlRm4ubWFya3VwID0gKGtleSwgdmFsdWVzLCBmb3JtYXRzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gdHJhbnNsYXRlQmFzZUZuKGtleSxcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0tIGBNYXJrdXBUcmFuc2xhdGlvblZhbHVlc2AgaXMgcHJhY3RpY2FsbHkgYSBzdWIgdHlwZVxuICAgIC8vIG9mIGBSaWNoVHJhbnNsYXRpb25WYWx1ZXNgIGJ1dCBUeXBlU2NyaXB0IGlzbid0IHNtYXJ0IGVub3VnaCBoZXJlLlxuICAgIHZhbHVlcywgZm9ybWF0cyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5GT1JNQVRUSU5HX0VSUk9SLCBcImB0Lm1hcmt1cGAgb25seSBhY2NlcHRzIGZ1bmN0aW9ucyBmb3IgZm9ybWF0dGluZyB0aGF0IHJlY2VpdmUgYW5kIHJldHVybiBzdHJpbmdzLlxcblxcbkUuZy4gdC5tYXJrdXAoJ21hcmt1cCcsIHtiOiAoY2h1bmtzKSA9PiBgPGI+JHtjaHVua3N9PC9iPmB9KVwiKTtcbiAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIGdldE1lc3NhZ2VGYWxsYmFjayh7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBrZXksXG4gICAgICAgIG5hbWVzcGFjZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHRyYW5zbGF0ZUZuLnJhdyA9IGtleSA9PiB7XG4gICAgaWYgKGhhc01lc3NhZ2VzRXJyb3IpIHtcbiAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgYWJvdXQgdGhpcyBkdXJpbmcgcmVuZGVyXG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZUZhbGxiYWNrKHtcbiAgICAgICAgZXJyb3I6IG1lc3NhZ2VzT3JFcnJvcixcbiAgICAgICAga2V5LFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlcyA9IG1lc3NhZ2VzT3JFcnJvcjtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHJlc29sdmVQYXRoKGxvY2FsZSwgbWVzc2FnZXMsIGtleSwgbmFtZXNwYWNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5KGtleSwgSW50bEVycm9yQ29kZS5NSVNTSU5HX01FU1NBR0UsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcbiAgdHJhbnNsYXRlRm4uaGFzID0ga2V5ID0+IHtcbiAgICBpZiAoaGFzTWVzc2FnZXNFcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmVzb2x2ZVBhdGgobG9jYWxlLCBtZXNzYWdlc09yRXJyb3IsIGtleSwgbmFtZXNwYWNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHRyYW5zbGF0ZUZuO1xufVxuXG4vKipcbiAqIEZvciB0aGUgc3RyaWN0bHkgdHlwZWQgbWVzc2FnZXMgdG8gd29yayB3ZSBoYXZlIHRvIHdyYXAgdGhlIG5hbWVzcGFjZSBpbnRvXG4gKiBhIG1hbmRhdG9yeSBwcmVmaXguIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzE1Mjk1NzUvMzQzMDQ1XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVOYW1lc3BhY2UobmFtZXNwYWNlLCBuYW1lc3BhY2VQcmVmaXgpIHtcbiAgcmV0dXJuIG5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlUHJlZml4ID8gdW5kZWZpbmVkIDogbmFtZXNwYWNlLnNsaWNlKChuYW1lc3BhY2VQcmVmaXggKyAnLicpLmxlbmd0aCk7XG59XG5cbmNvbnN0IFNFQ09ORCA9IDE7XG5jb25zdCBNSU5VVEUgPSBTRUNPTkQgKiA2MDtcbmNvbnN0IEhPVVIgPSBNSU5VVEUgKiA2MDtcbmNvbnN0IERBWSA9IEhPVVIgKiAyNDtcbmNvbnN0IFdFRUsgPSBEQVkgKiA3O1xuY29uc3QgTU9OVEggPSBEQVkgKiAoMzY1IC8gMTIpOyAvLyBBcHByb3hpbWF0aW9uXG5jb25zdCBRVUFSVEVSID0gTU9OVEggKiAzO1xuY29uc3QgWUVBUiA9IERBWSAqIDM2NTtcbmNvbnN0IFVOSVRfU0VDT05EUyA9IHtcbiAgc2Vjb25kOiBTRUNPTkQsXG4gIHNlY29uZHM6IFNFQ09ORCxcbiAgbWludXRlOiBNSU5VVEUsXG4gIG1pbnV0ZXM6IE1JTlVURSxcbiAgaG91cjogSE9VUixcbiAgaG91cnM6IEhPVVIsXG4gIGRheTogREFZLFxuICBkYXlzOiBEQVksXG4gIHdlZWs6IFdFRUssXG4gIHdlZWtzOiBXRUVLLFxuICBtb250aDogTU9OVEgsXG4gIG1vbnRoczogTU9OVEgsXG4gIHF1YXJ0ZXI6IFFVQVJURVIsXG4gIHF1YXJ0ZXJzOiBRVUFSVEVSLFxuICB5ZWFyOiBZRUFSLFxuICB5ZWFyczogWUVBUlxufTtcbmZ1bmN0aW9uIHJlc29sdmVSZWxhdGl2ZVRpbWVVbml0KHNlY29uZHMpIHtcbiAgY29uc3QgYWJzVmFsdWUgPSBNYXRoLmFicyhzZWNvbmRzKTtcbiAgaWYgKGFic1ZhbHVlIDwgTUlOVVRFKSB7XG4gICAgcmV0dXJuICdzZWNvbmQnO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgSE9VUikge1xuICAgIHJldHVybiAnbWludXRlJztcbiAgfSBlbHNlIGlmIChhYnNWYWx1ZSA8IERBWSkge1xuICAgIHJldHVybiAnaG91cic7XG4gIH0gZWxzZSBpZiAoYWJzVmFsdWUgPCBXRUVLKSB7XG4gICAgcmV0dXJuICdkYXknO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgTU9OVEgpIHtcbiAgICByZXR1cm4gJ3dlZWsnO1xuICB9IGVsc2UgaWYgKGFic1ZhbHVlIDwgWUVBUikge1xuICAgIHJldHVybiAnbW9udGgnO1xuICB9XG4gIHJldHVybiAneWVhcic7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVSZWxhdGl2ZVRpbWVWYWx1ZShzZWNvbmRzLCB1bml0KSB7XG4gIC8vIFdlIGhhdmUgdG8gcm91bmQgdGhlIHJlc3VsdGluZyB2YWx1ZXMsIGFzIGBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdGBcbiAgLy8gd2lsbCBpbmNsdWRlIGZyYWN0aW9ucyBsaWtlICcyLjEgaG91cnMgYWdvJy5cbiAgcmV0dXJuIE1hdGgucm91bmQoc2Vjb25kcyAvIFVOSVRfU0VDT05EU1t1bml0XSk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIF9jYWNoZTogY2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuICAgIF9mb3JtYXR0ZXJzOiBmb3JtYXR0ZXJzID0gY3JlYXRlSW50bEZvcm1hdHRlcnMoY2FjaGUpLFxuICAgIGZvcm1hdHMsXG4gICAgbG9jYWxlLFxuICAgIG9uRXJyb3IgPSBkZWZhdWx0T25FcnJvcixcbiAgICB0aW1lWm9uZTogZ2xvYmFsVGltZVpvbmVcbiAgfSA9IHByb3BzO1xuICBmdW5jdGlvbiBhcHBseVRpbWVab25lKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnM/LnRpbWVab25lKSB7XG4gICAgICBpZiAoZ2xvYmFsVGltZVpvbmUpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIHRpbWVab25lOiBnbG9iYWxUaW1lWm9uZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25FcnJvcihuZXcgSW50bEVycm9yKEludGxFcnJvckNvZGUuRU5WSVJPTk1FTlRfRkFMTEJBQ0ssIGBUaGUgXFxgdGltZVpvbmVcXGAgcGFyYW1ldGVyIHdhc24ndCBwcm92aWRlZCBhbmQgdGhlcmUgaXMgbm8gZ2xvYmFsIGRlZmF1bHQgY29uZmlndXJlZC4gQ29uc2lkZXIgYWRkaW5nIGEgZ2xvYmFsIGRlZmF1bHQgdG8gYXZvaWQgbWFya3VwIG1pc21hdGNoZXMgY2F1c2VkIGJ5IGVudmlyb25tZW50IGRpZmZlcmVuY2VzLiBMZWFybiBtb3JlOiBodHRwczovL25leHQtaW50bC5kZXYvZG9jcy9jb25maWd1cmF0aW9uI3RpbWUtem9uZWAgKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG4gIGZ1bmN0aW9uIHJlc29sdmVGb3JtYXRPck9wdGlvbnModHlwZUZvcm1hdHMsIGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzKSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBmb3JtYXRPck9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBmb3JtYXROYW1lID0gZm9ybWF0T3JPcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHR5cGVGb3JtYXRzPy5bZm9ybWF0TmFtZV07XG4gICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgSW50bEVycm9yKEludGxFcnJvckNvZGUuTUlTU0lOR19GT1JNQVQsIGBGb3JtYXQgXFxgJHtmb3JtYXROYW1lfVxcYCBpcyBub3QgYXZhaWxhYmxlLmAgKTtcbiAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gZm9ybWF0T3JPcHRpb25zO1xuICAgIH1cbiAgICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAuLi5vdmVycmlkZXNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG4gIGZ1bmN0aW9uIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCB0eXBlRm9ybWF0cywgZm9ybWF0dGVyLCBnZXRGYWxsYmFjaykge1xuICAgIGxldCBvcHRpb25zO1xuICAgIHRyeSB7XG4gICAgICBvcHRpb25zID0gcmVzb2x2ZUZvcm1hdE9yT3B0aW9ucyh0eXBlRm9ybWF0cywgZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkVycm9yKG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5GT1JNQVRUSU5HX0VSUk9SLCBlcnJvci5tZXNzYWdlKSk7XG4gICAgICByZXR1cm4gZ2V0RmFsbGJhY2soKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGF0ZVRpbWUodmFsdWUsIGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCBmb3JtYXRzPy5kYXRlVGltZSwgb3B0aW9ucyA9PiB7XG4gICAgICBvcHRpb25zID0gYXBwbHlUaW1lWm9uZShvcHRpb25zKTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KHZhbHVlKTtcbiAgICB9LCAoKSA9PiBTdHJpbmcodmFsdWUpKTtcbiAgfVxuICBmdW5jdGlvbiBkYXRlVGltZVJhbmdlKHN0YXJ0LCBlbmQsIGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCBmb3JtYXRzPy5kYXRlVGltZSwgb3B0aW9ucyA9PiB7XG4gICAgICBvcHRpb25zID0gYXBwbHlUaW1lWm9uZShvcHRpb25zKTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCk7XG4gICAgfSwgKCkgPT4gW2RhdGVUaW1lKHN0YXJ0KSwgZGF0ZVRpbWUoZW5kKV0uam9pbign4oCJ4oCT4oCJJykpO1xuICB9XG4gIGZ1bmN0aW9uIG51bWJlcih2YWx1ZSwgZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMpIHtcbiAgICByZXR1cm4gZ2V0Rm9ybWF0dGVkVmFsdWUoZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMsIGZvcm1hdHM/Lm51bWJlciwgb3B0aW9ucyA9PiBmb3JtYXR0ZXJzLmdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSksICgpID0+IFN0cmluZyh2YWx1ZSkpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEdsb2JhbE5vdygpIHtcbiAgICAvLyBPbmx5IHJlYWQgd2hlbiBuZWNlc3NhcnkgdG8gYXZvaWQgdHJpZ2dlcmluZyBhIGBkeW5hbWljSU9gIGVycm9yXG4gICAgLy8gdW5uZWNlc3NhcmlseSAoYG5vd2AgaXMgb25seSBuZWVkZWQgZm9yIGBmb3JtYXQucmVsYXRpdmVUaW1lYClcbiAgICBpZiAocHJvcHMubm93KSB7XG4gICAgICByZXR1cm4gcHJvcHMubm93O1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkVycm9yKG5ldyBJbnRsRXJyb3IoSW50bEVycm9yQ29kZS5FTlZJUk9OTUVOVF9GQUxMQkFDSywgYFRoZSBcXGBub3dcXGAgcGFyYW1ldGVyIHdhc24ndCBwcm92aWRlZCB0byBcXGByZWxhdGl2ZVRpbWVcXGAgYW5kIHRoZXJlIGlzIG5vIGdsb2JhbCBkZWZhdWx0IGNvbmZpZ3VyZWQsIHRoZXJlZm9yZSB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZCBhcyBhIGZhbGxiYWNrLiBTZWUgaHR0cHM6Ly9uZXh0LWludGwuZGV2L2RvY3MvdXNhZ2UvZGF0ZXMtdGltZXMjcmVsYXRpdmUtdGltZXMtdXNlbm93YCApKTtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUoZGF0ZSwgbm93T3JPcHRpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBub3dEYXRlLCB1bml0O1xuICAgICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgICAgaWYgKG5vd09yT3B0aW9ucyBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIG5vd09yT3B0aW9ucyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm93RGF0ZSA9IG5ldyBEYXRlKG5vd09yT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKG5vd09yT3B0aW9ucykge1xuICAgICAgICBpZiAobm93T3JPcHRpb25zLm5vdyAhPSBudWxsKSB7XG4gICAgICAgICAgbm93RGF0ZSA9IG5ldyBEYXRlKG5vd09yT3B0aW9ucy5ub3cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vd0RhdGUgPSBnZXRHbG9iYWxOb3coKTtcbiAgICAgICAgfVxuICAgICAgICB1bml0ID0gbm93T3JPcHRpb25zLnVuaXQ7XG4gICAgICAgIG9wdHMuc3R5bGUgPSBub3dPck9wdGlvbnMuc3R5bGU7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gVHlwZXMgYXJlIHNsaWdodGx5IG91dGRhdGVkXG4gICAgICAgIG9wdHMubnVtYmVyaW5nU3lzdGVtID0gbm93T3JPcHRpb25zLm51bWJlcmluZ1N5c3RlbTtcbiAgICAgIH1cbiAgICAgIGlmICghbm93RGF0ZSkge1xuICAgICAgICBub3dEYXRlID0gZ2V0R2xvYmFsTm93KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRlRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgY29uc3Qgc2Vjb25kcyA9IChkYXRlRGF0ZS5nZXRUaW1lKCkgLSBub3dEYXRlLmdldFRpbWUoKSkgLyAxMDAwO1xuICAgICAgaWYgKCF1bml0KSB7XG4gICAgICAgIHVuaXQgPSByZXNvbHZlUmVsYXRpdmVUaW1lVW5pdChzZWNvbmRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gYG51bWVyaWM6ICdhdXRvJ2AgY2FuIHRoZW9yZXRpY2FsbHkgcHJvZHVjZSBvdXRwdXQgbGlrZSBcInllc3RlcmRheVwiLFxuICAgICAgLy8gYnV0IGl0IG9ubHkgd29ya3Mgd2l0aCBpbnRlZ2Vycy4gRS5nLiAtMSBkYXkgd2lsbCBwcm9kdWNlIFwieWVzdGVyZGF5XCIsXG4gICAgICAvLyBidXQgLTEuMSBkYXlzIHdpbGwgcHJvZHVjZSBcIi0xLjEgZGF5c1wiLiBSb3VuZGluZyBiZWZvcmUgZm9ybWF0dGluZyBpc1xuICAgICAgLy8gbm90IGRlc2lyZWQsIGFzIHRoZSBnaXZlbiBkYXRlcyBtaWdodCBjcm9zcyBhIHRocmVzaG9sZCB3ZXJlIHRoZVxuICAgICAgLy8gb3V0cHV0IGlzbid0IGNvcnJlY3QgYW55bW9yZS4gRXhhbXBsZTogMjAyNC0wMS0wOFQyMzowMDowMC4wMDBaIGFuZFxuICAgICAgLy8gMjAyNC0wMS0wOFQwMTowMDowMC4wMDBaIHdvdWxkIHByb2R1Y2UgXCJ5ZXN0ZXJkYXlcIiwgd2hpY2ggaXMgbm90IHRoZVxuICAgICAgLy8gY2FzZS4gQnkgdXNpbmcgYGFsd2F5c2Agd2UgY2FuIGVuc3VyZSBjb3JyZWN0IG91dHB1dC4gVGhlIG9ubHkgZXhjZXB0aW9uXG4gICAgICAvLyBpcyB0aGUgZm9ybWF0dGluZyBvZiB0aW1lcyA8MSBzZWNvbmQgYXMgXCJub3dcIi5cbiAgICAgIG9wdHMubnVtZXJpYyA9IHVuaXQgPT09ICdzZWNvbmQnID8gJ2F1dG8nIDogJ2Fsd2F5cyc7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNhbGN1bGF0ZVJlbGF0aXZlVGltZVZhbHVlKHNlY29uZHMsIHVuaXQpO1xuICAgICAgcmV0dXJuIGZvcm1hdHRlcnMuZ2V0UmVsYXRpdmVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0cykuZm9ybWF0KHZhbHVlLCB1bml0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25FcnJvcihuZXcgSW50bEVycm9yKEludGxFcnJvckNvZGUuRk9STUFUVElOR19FUlJPUiwgZXJyb3IubWVzc2FnZSkpO1xuICAgICAgcmV0dXJuIFN0cmluZyhkYXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbGlzdCh2YWx1ZSwgZm9ybWF0T3JPcHRpb25zLCBvdmVycmlkZXMpIHtcbiAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSBbXTtcbiAgICBjb25zdCByaWNoVmFsdWVzID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gYGZvcm1hdFRvUGFydHNgIG9ubHkgYWNjZXB0cyBzdHJpbmdzLCB0aGVyZWZvcmUgd2UgaGF2ZSB0byB0ZW1wb3JhcmlseVxuICAgIC8vIHJlcGxhY2UgUmVhY3QgZWxlbWVudHMgd2l0aCBhIHBsYWNlaG9sZGVyIElEIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmV0cmlldmVcbiAgICAvLyB0aGUgb3JpZ2luYWwgdmFsdWUgYWZ0ZXJ3YXJkcy5cbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgbGV0IHNlcmlhbGl6ZWRJdGVtO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICBzZXJpYWxpemVkSXRlbSA9IFN0cmluZyhpbmRleCk7XG4gICAgICAgIHJpY2hWYWx1ZXMuc2V0KHNlcmlhbGl6ZWRJdGVtLCBpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcmlhbGl6ZWRJdGVtID0gU3RyaW5nKGl0ZW0pO1xuICAgICAgfVxuICAgICAgc2VyaWFsaXplZFZhbHVlLnB1c2goc2VyaWFsaXplZEl0ZW0pO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgcmV0dXJuIGdldEZvcm1hdHRlZFZhbHVlKGZvcm1hdE9yT3B0aW9ucywgb3ZlcnJpZGVzLCBmb3JtYXRzPy5saXN0LFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gYHJpY2hWYWx1ZXMuc2l6ZWAgaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHJldHVybiB0eXBlLCBidXQgVHlwZVNjcmlwdCBjYW4ndCBpbmZlciB0aGUgbWVhbmluZyBvZiB0aGlzIGNvcnJlY3RseVxuICAgIG9wdGlvbnMgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVycy5nZXRMaXN0Rm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0VG9QYXJ0cyhzZXJpYWxpemVkVmFsdWUpLm1hcChwYXJ0ID0+IHBhcnQudHlwZSA9PT0gJ2xpdGVyYWwnID8gcGFydC52YWx1ZSA6IHJpY2hWYWx1ZXMuZ2V0KHBhcnQudmFsdWUpIHx8IHBhcnQudmFsdWUpO1xuICAgICAgaWYgKHJpY2hWYWx1ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgICB9XG4gICAgfSwgKCkgPT4gU3RyaW5nKHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXRlVGltZSxcbiAgICBudW1iZXIsXG4gICAgcmVsYXRpdmVUaW1lLFxuICAgIGxpc3QsXG4gICAgZGF0ZVRpbWVSYW5nZVxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1lc3NhZ2VzU2VnbWVudChtZXNzYWdlcywgaW52YWxpZEtleUxhYmVscywgcGFyZW50UGF0aCkge1xuICBPYmplY3QuZW50cmllcyhtZXNzYWdlcykuZm9yRWFjaCgoW2tleSwgbWVzc2FnZU9yTWVzc2FnZXNdKSA9PiB7XG4gICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICBsZXQga2V5TGFiZWwgPSBrZXk7XG4gICAgICBpZiAocGFyZW50UGF0aCkga2V5TGFiZWwgKz0gYCAoYXQgJHtwYXJlbnRQYXRofSlgO1xuICAgICAgaW52YWxpZEtleUxhYmVscy5wdXNoKGtleUxhYmVsKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgIGlmIChtZXNzYWdlT3JNZXNzYWdlcyAhPSBudWxsICYmIHR5cGVvZiBtZXNzYWdlT3JNZXNzYWdlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkYXRlTWVzc2FnZXNTZWdtZW50KG1lc3NhZ2VPck1lc3NhZ2VzLCBpbnZhbGlkS2V5TGFiZWxzLCBqb2luUGF0aChwYXJlbnRQYXRoLCBrZXkpKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNZXNzYWdlcyhtZXNzYWdlcywgb25FcnJvcikge1xuICBjb25zdCBpbnZhbGlkS2V5TGFiZWxzID0gW107XG4gIHZhbGlkYXRlTWVzc2FnZXNTZWdtZW50KG1lc3NhZ2VzLCBpbnZhbGlkS2V5TGFiZWxzKTtcbiAgaWYgKGludmFsaWRLZXlMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgIG9uRXJyb3IobmV3IEludGxFcnJvcihJbnRsRXJyb3JDb2RlLklOVkFMSURfS0VZLCBgTmFtZXNwYWNlIGtleXMgY2FuIG5vdCBjb250YWluIHRoZSBjaGFyYWN0ZXIgXCIuXCIgYXMgdGhpcyBpcyB1c2VkIHRvIGV4cHJlc3MgbmVzdGluZy4gUGxlYXNlIHJlbW92ZSBpdCBvciByZXBsYWNlIGl0IHdpdGggYW5vdGhlciBjaGFyYWN0ZXIuXG5cbkludmFsaWQgJHtpbnZhbGlkS2V5TGFiZWxzLmxlbmd0aCA9PT0gMSA/ICdrZXknIDogJ2tleXMnfTogJHtpbnZhbGlkS2V5TGFiZWxzLmpvaW4oJywgJyl9XG5cbklmIHlvdSdyZSBtaWdyYXRpbmcgZnJvbSBhIGZsYXQgc3RydWN0dXJlLCB5b3UgY2FuIGNvbnZlcnQgeW91ciBtZXNzYWdlcyBhcyBmb2xsb3dzOlxuXG5pbXBvcnQge3NldH0gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBpbnB1dCA9IHtcbiAgXCJvbmUub25lXCI6IFwiMS4xXCIsXG4gIFwib25lLnR3b1wiOiBcIjEuMlwiLFxuICBcInR3by5vbmUub25lXCI6IFwiMi4xLjFcIlxufTtcblxuY29uc3Qgb3V0cHV0ID0gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZShcbiAgKGFjYywgW2tleSwgdmFsdWVdKSA9PiBzZXQoYWNjLCBrZXksIHZhbHVlKSxcbiAge31cbik7XG5cbi8vIE91dHB1dDpcbi8vXG4vLyB7XG4vLyAgIFwib25lXCI6IHtcbi8vICAgICBcIm9uZVwiOiBcIjEuMVwiLFxuLy8gICAgIFwidHdvXCI6IFwiMS4yXCJcbi8vICAgfSxcbi8vICAgXCJ0d29cIjoge1xuLy8gICAgIFwib25lXCI6IHtcbi8vICAgICAgIFwib25lXCI6IFwiMi4xLjFcIlxuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuYCApKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuaGFuY2VzIHRoZSBpbmNvbWluZyBwcm9wcyB3aXRoIGRlZmF1bHRzLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplQ29uZmlnKHtcbiAgZm9ybWF0cyxcbiAgZ2V0TWVzc2FnZUZhbGxiYWNrLFxuICBtZXNzYWdlcyxcbiAgb25FcnJvcixcbiAgLi4ucmVzdFxufSkge1xuICBjb25zdCBmaW5hbE9uRXJyb3IgPSBvbkVycm9yIHx8IGRlZmF1bHRPbkVycm9yO1xuICBjb25zdCBmaW5hbEdldE1lc3NhZ2VGYWxsYmFjayA9IGdldE1lc3NhZ2VGYWxsYmFjayB8fCBkZWZhdWx0R2V0TWVzc2FnZUZhbGxiYWNrO1xuICB7XG4gICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzKG1lc3NhZ2VzLCBmaW5hbE9uRXJyb3IpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLnJlc3QsXG4gICAgZm9ybWF0czogZm9ybWF0cyB8fCB1bmRlZmluZWQsXG4gICAgbWVzc2FnZXM6IG1lc3NhZ2VzIHx8IHVuZGVmaW5lZCxcbiAgICBvbkVycm9yOiBmaW5hbE9uRXJyb3IsXG4gICAgZ2V0TWVzc2FnZUZhbGxiYWNrOiBmaW5hbEdldE1lc3NhZ2VGYWxsYmFja1xuICB9O1xufVxuXG5leHBvcnQgeyBJbnRsRXJyb3IgYXMgSSwgSW50bEVycm9yQ29kZSBhcyBhLCBjcmVhdGVJbnRsRm9ybWF0dGVycyBhcyBiLCBjcmVhdGVGb3JtYXR0ZXIgYXMgYywgY3JlYXRlQ2FjaGUgYXMgZCwgY3JlYXRlQmFzZVRyYW5zbGF0b3IgYXMgZSwgZGVmYXVsdEdldE1lc3NhZ2VGYWxsYmFjayBhcyBmLCBkZWZhdWx0T25FcnJvciBhcyBnLCBpbml0aWFsaXplQ29uZmlnIGFzIGksIHJlc29sdmVOYW1lc3BhY2UgYXMgciB9O1xuIl0sIm5hbWVzIjpbIkludGxNZXNzYWdlRm9ybWF0IiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJtZW1vaXplIiwic3RyYXRlZ2llcyIsIkludGxFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJjb2RlIiwib3JpZ2luYWxNZXNzYWdlIiwibWVzc2FnZSIsIkludGxFcnJvckNvZGUiLCJjb252ZXJ0Rm9ybWF0c1RvSW50bE1lc3NhZ2VGb3JtYXQiLCJnbG9iYWxGb3JtYXRzIiwiaW5saW5lRm9ybWF0cyIsInRpbWVab25lIiwibWZEYXRlRGVmYXVsdHMiLCJmb3JtYXRzIiwiZGF0ZSIsIm1mVGltZURlZmF1bHRzIiwidGltZSIsImRhdGVUaW1lRm9ybWF0cyIsImRhdGVUaW1lIiwiYWxsRm9ybWF0cyIsIm51bWJlciIsImZvckVhY2giLCJwcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImpvaW5QYXRoIiwicGFydHMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImRlZmF1bHRHZXRNZXNzYWdlRmFsbGJhY2siLCJwcm9wcyIsIm5hbWVzcGFjZSIsImRlZmF1bHRPbkVycm9yIiwiZXJyb3IiLCJjb25zb2xlIiwiY3JlYXRlQ2FjaGUiLCJyZWxhdGl2ZVRpbWUiLCJwbHVyYWxSdWxlcyIsImxpc3QiLCJkaXNwbGF5TmFtZXMiLCJjcmVhdGVNZW1vQ2FjaGUiLCJzdG9yZSIsImNyZWF0ZSIsImdldCIsInNldCIsIm1lbW9GbiIsImZuIiwiY2FjaGUiLCJzdHJhdGVneSIsInZhcmlhZGljIiwibWVtb0NvbnN0cnVjdG9yIiwiQ29uc3RydWN0b3JGbiIsImFyZ3MiLCJjcmVhdGVJbnRsRm9ybWF0dGVycyIsImdldERhdGVUaW1lRm9ybWF0IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiTnVtYmVyRm9ybWF0IiwiZ2V0UGx1cmFsUnVsZXMiLCJQbHVyYWxSdWxlcyIsImdldFJlbGF0aXZlVGltZUZvcm1hdCIsIlJlbGF0aXZlVGltZUZvcm1hdCIsImdldExpc3RGb3JtYXQiLCJMaXN0Rm9ybWF0IiwiZ2V0RGlzcGxheU5hbWVzIiwiRGlzcGxheU5hbWVzIiwiY3JlYXRlTWVzc2FnZUZvcm1hdHRlciIsImludGxGb3JtYXR0ZXJzIiwiZ2V0TWVzc2FnZUZvcm1hdCIsImZvcm1hdHRlcnMiLCJyZXNvbHZlUGF0aCIsImxvY2FsZSIsIm1lc3NhZ2VzIiwiZnVsbEtleSIsInNwbGl0IiwicGFydCIsIm5leHQiLCJwcmVwYXJlVHJhbnNsYXRpb25WYWx1ZXMiLCJ2YWx1ZXMiLCJ0cmFuc2Zvcm1lZFZhbHVlcyIsImtleXMiLCJpbmRleCIsInRyYW5zZm9ybWVkIiwiY2h1bmtzIiwicmVzdWx0IiwiZ2V0TWVzc2FnZXNPckVycm9yIiwib25FcnJvciIsInJldHJpZXZlZE1lc3NhZ2VzIiwiaW50bEVycm9yIiwiTUlTU0lOR19NRVNTQUdFIiwiZ2V0UGxhaW5NZXNzYWdlIiwiY2FuZGlkYXRlIiwidGVzdCIsInVuZGVmaW5lZCIsImNyZWF0ZUJhc2VUcmFuc2xhdG9yIiwiY29uZmlnIiwibWVzc2FnZXNPckVycm9yIiwiY3JlYXRlQmFzZVRyYW5zbGF0b3JJbXBsIiwiZ2V0TWVzc2FnZUZhbGxiYWNrIiwiaGFzTWVzc2FnZXNFcnJvciIsImdldEZhbGxiYWNrRnJvbUVycm9yQW5kTm90aWZ5IiwidHJhbnNsYXRlQmFzZUZuIiwiZXJyb3JNZXNzYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwiSU5WQUxJRF9NRVNTQUdFIiwiSU5TVUZGSUNJRU5UX1BBVEgiLCJtZXNzYWdlRm9ybWF0IiwicGxhaW5NZXNzYWdlIiwibG9jYWxlcyIsIm9wdGlvbnMiLCJ0aHJvd25FcnJvciIsImZvcm1hdHRlZE1lc3NhZ2UiLCJmb3JtYXQiLCJTdHJpbmciLCJGT1JNQVRUSU5HX0VSUk9SIiwidHJhbnNsYXRlRm4iLCJyaWNoIiwibWFya3VwIiwicmF3IiwiaGFzIiwicmVzb2x2ZU5hbWVzcGFjZSIsIm5hbWVzcGFjZVByZWZpeCIsInNsaWNlIiwibGVuZ3RoIiwiU0VDT05EIiwiTUlOVVRFIiwiSE9VUiIsIkRBWSIsIldFRUsiLCJNT05USCIsIlFVQVJURVIiLCJZRUFSIiwiVU5JVF9TRUNPTkRTIiwic2Vjb25kIiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwiaG91cnMiLCJkYXkiLCJkYXlzIiwid2VlayIsIndlZWtzIiwibW9udGgiLCJtb250aHMiLCJxdWFydGVyIiwicXVhcnRlcnMiLCJ5ZWFyIiwieWVhcnMiLCJyZXNvbHZlUmVsYXRpdmVUaW1lVW5pdCIsImFic1ZhbHVlIiwiTWF0aCIsImFicyIsImNhbGN1bGF0ZVJlbGF0aXZlVGltZVZhbHVlIiwidW5pdCIsInJvdW5kIiwiY3JlYXRlRm9ybWF0dGVyIiwiX2NhY2hlIiwiX2Zvcm1hdHRlcnMiLCJnbG9iYWxUaW1lWm9uZSIsImFwcGx5VGltZVpvbmUiLCJFTlZJUk9OTUVOVF9GQUxMQkFDSyIsInJlc29sdmVGb3JtYXRPck9wdGlvbnMiLCJ0eXBlRm9ybWF0cyIsImZvcm1hdE9yT3B0aW9ucyIsIm92ZXJyaWRlcyIsImZvcm1hdE5hbWUiLCJNSVNTSU5HX0ZPUk1BVCIsImdldEZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0dGVyIiwiZ2V0RmFsbGJhY2siLCJkYXRlVGltZVJhbmdlIiwic3RhcnQiLCJlbmQiLCJmb3JtYXRSYW5nZSIsImdldEdsb2JhbE5vdyIsIm5vdyIsIkRhdGUiLCJub3dPck9wdGlvbnMiLCJub3dEYXRlIiwib3B0cyIsInN0eWxlIiwibnVtYmVyaW5nU3lzdGVtIiwiZGF0ZURhdGUiLCJnZXRUaW1lIiwibnVtZXJpYyIsInNlcmlhbGl6ZWRWYWx1ZSIsInJpY2hWYWx1ZXMiLCJNYXAiLCJpdGVtIiwic2VyaWFsaXplZEl0ZW0iLCJwdXNoIiwiZm9ybWF0VG9QYXJ0cyIsIm1hcCIsInR5cGUiLCJzaXplIiwidmFsaWRhdGVNZXNzYWdlc1NlZ21lbnQiLCJpbnZhbGlkS2V5TGFiZWxzIiwicGFyZW50UGF0aCIsIm1lc3NhZ2VPck1lc3NhZ2VzIiwiaW5jbHVkZXMiLCJrZXlMYWJlbCIsInZhbGlkYXRlTWVzc2FnZXMiLCJJTlZBTElEX0tFWSIsImluaXRpYWxpemVDb25maWciLCJyZXN0IiwiZmluYWxPbkVycm9yIiwiZmluYWxHZXRNZXNzYWdlRmFsbGJhY2siLCJJIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImkiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js\n");

/***/ })

};
;